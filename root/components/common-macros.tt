[%- USE u = Utils -%]
[%- USE JavaScript -%]
[%- USE React -%]
[%- PROCESS 'components/rating-macros.tt' -%]
[%-# This next could use localization for alternating comma/period use per locale -%]
[%~ MACRO add_commas(n) GET n.chunk(-3).join(',') -%]
[%~ MACRO replace(text, search, replace) BLOCK; text | replace(search, replace); END # Converted to React with standard String.replace
-%]
[%~# Use uri_escape for percent-encoding random text to be used as a parameter
   # in an external URL (use c.uri_for(_action) for making internal URLs).
   # A URL passed in from somewhere, on the other hand, should already be
   # percent-encoded and not be run through uri_escape; just use html_escape
   # for entity-encoding reserved characters (the ampersand, in particular).
   # ~%]
[%~ MACRO uri_escape(text) BLOCK; text | uri; END # Converted to React with standard encodeURIComponent
~%]
[%~ MACRO html_escape(text) BLOCK; text | html; END # Converted to React (unneeded)
~%]
[%~ MACRO html_unescape(text) BLOCK; text.replace('&quot;', '"').replace('&lt;', '<').replace('&gt;', '>').replace('&#39;', "'").replace('&amp;', '&'); END -%]
[%~ MACRO bracketedWithSpace(text) BLOCK; text != '' ? l(' ({text})', { text => text }) : ''; END # Converted to React at root/static/scripts/common/utility/bracketed.js
-%]
[%~ MACRO closing_tag_escape(text) BLOCK; text.replace('</', '<\\/'); END # Converted to React at root/utility/escapeClosingTags.js
~%]
[%- USE UserDate(c.user.preferences, current_language) # Converted to React at root/utility/formatUserDate.js
-%]
[%~ MACRO doc_link(to) BLOCK -%][% c.uri_for('/doc', to) %][%- END -%]
[%~ MACRO va_doc_link BLOCK -%]
    [%- doc_link('Style/Unknown_and_untitled/Special_purpose_artist#List_of_official_SPAs') -%]
[%- END -%]
[%~ MACRO yesno(b) BLOCK; b ? l('Yes') : l('No'); END ~%] [% # Converted to React at root/static/scripts/common/utility/yesNo.js %]

[%~ MACRO isolate_text(text) BLOCK; # Converted to React at root/static/scripts/common/utility/isolateText.js
    IF text != ''; INCLUDE _wrap_text options=['isolate', 'escape'] content=text;
    ELSE; '';
    END;
END ~%]

[%- USE Translation('mb_server') -%]
[%~ MACRO l(text, args) BLOCK; # Converted to React at root/static/scripts/common/i18n.js
    Translation.l(text, args);
END; -%]

[%~ MACRO lp(text, context, args) BLOCK; # Converted to React at root/static/scripts/common/i18n.js
    Translation.lp(text, context, args);
END; -%]
[%#- There is a bug in this implementation fo ngettext that is easier to fix by policy that's why it's not fixed yet.
The problem surfaces when an unfinished translation file is used, in this case a plural translation would
apply language-specific plural construction rules to the untranslated english string. If a translation language has
more than two plural forms, then the first plural form (germanic plural) is chosen for every form other than the first
two. -%]
[%~ MACRO ln(text, plural, num, args) BLOCK; # Converted to React at root/static/scripts/common/i18n.js
    Translation.ln(text, plural, num, args);
END; -%]

[%~ MACRO N_ln(text, plural) BLOCK; # Converted to React at root/static/scripts/common/i18n.js
    Translation.N_ln(text, plural);
END; -%]

[%~ MACRO expand(text, args) BLOCK; # Converted to React at root/static/scripts/common/i18n/expand2.js
    Translation.expand(text, args);
END; -%]

[%~ MACRO display_age_ago(age) BLOCK; # Converted to React at root/utility/age.js
        IF age.0;
          ln('{num} year ago', '{num} years ago', age.0, { num => age.0 });
        ELSIF age.1;
          ln('{num} month ago', '{num} months ago', age.1, { num => age.1 });
        ELSE;
          ln('{num} day ago', '{num} days ago', age.2, { num => age.2 });
        END;
    END -%]

[%~ MACRO artwork_hover(artwork) BLOCK -%]
    [%- IF artwork.l_types; comma_only_list(artwork.l_types) | html; END %][% IF artwork.comment %] ([% artwork.comment | html%])[% END -%]
[%- END -%]

[%- USE JavaScript -%]
[%~ MACRO display_artwork_image(artwork, fallback, message) BLOCK -%]
    <noscript>
        <img src="[% artwork.small_thumbnail %]" />
    </noscript>

    <span class="cover-art-image"
        data-small-thumbnail="[% artwork.small_thumbnail %]"
        data-large-thumbnail="[% artwork.large_thumbnail %]"
        data-fallback="[% fallback %]"
        data-title="[% artwork_hover(artwork) %]"
        data-message="[% message ? message : l('Image not available yet, please try again in a few minutes.') | html %]"
    ></span>
[% END %]

[%~ MACRO display_artwork(artwork, fallback, message) BLOCK -%]
    <a title="[% artwork_hover(artwork) %]" href="[% artwork.image %]" class="[% IF artwork.mime_type == "application/pdf" %]artwork-pdf[% ELSE %]artwork-image[% END %]">
        [%~ IF artwork.mime_type == "application/pdf" ~%]
            <div title="[% l("This is a PDF file, the thumbnail may not show the entire contents of the file.") %]" class="file-format-tag">[% l("PDF file") %]</div>
        [%~ END ~%]

        [% display_artwork_image(artwork, fallback, message) %]
    </a>
[%- END -%]

[%~ MACRO cover_art_links(artwork) BLOCK -%]
[% IF artwork.small_thumbnail %]<a href="[% artwork.small_thumbnail %]">[% l('250px') %]</a> |[% END %]
[% IF artwork.large_thumbnail %]<a href="[% artwork.large_thumbnail %]">[% l('500px') %]</a> |[% END %]
<a href="[% artwork.image %]">[% l('original') %]</a>
[%- END -%]

[%~ MACRO cover_art_url(url) BLOCK; # Converted to React at root/utility/coverArtUrl.js
    IF c.req.secure;
        url | coverart_https;
    ELSE;
        url;
    END;
END -%]

[%-# Take type and return pluralized word form, avoids problems with '|% type %|s' #-%]
[%~ MACRO get_plural_type(entity)
    SWITCH entity;
        CASE 'release';
            l('releases');
        CASE 'artist';
            l('artists');
        CASE 'area';
            l('areas');
        CASE 'event';
            l('events');
        CASE 'instrument';
            l('instruments');
        CASE 'label';
            l('labels');
        CASE 'place';
            l('places');
        CASE 'track';
            l('tracks');
        CASE 'recording';
            l('recordings');
        CASE 'release_group';
            l('release groups');
        CASE 'series';
            lp('series', 'plural');
        CASE 'editor';
            l('editors');
        CASE 'work';
            l('works');
        CASE 'url';
            l('URLs');
        CASE DEFAULT;
            l('Error: Unknown Type');
    END -%]

[%~ MACRO disambiguation(entity) BLOCK -%]
    [%- IF entity.isa('MusicBrainz::Server::Entity::Event') -%]
        [%- cancelled(entity) -%]
    [%- END -%]
    [%- IF entity.comment -%]
        [%- ' <span class="comment">(<bdi>' _ html_escape("${entity.comment}") _ '</bdi>)</span>' -%]
    [%- END -%]
    [%- IF entity.isa('MusicBrainz::Server::Entity::Area') -%]
        [%- historical(entity) -%]
    [%- END -%]
[%- END -%]

[%~ MACRO historical(entity) BLOCK -%]
    [%- IF entity.ended -%]
        <span class="historical">(<bdi>
            [%- IF entity.begin_date.has_year && entity.end_date.has_year -%]
                [%- l("historical, {begin}-{end}", { begin => entity.begin_date.year, end => entity.end_date.year }) -%]
            [%- ELSIF entity.end_date.has_year -%]
                [%- l("historical, until {end}", { end => entity.end_date.year }) -%]
            [%- ELSE -%]
                [%- l("historical") -%]
            [%- END -%]
        [%- -%]</bdi>)</span>
    [%- END -%]
[%- END -%]

[%~ MACRO cancelled(entity) BLOCK -%]
    [%- IF entity.cancelled -%]
        <span class="cancelled">(<bdi>
            [%~ l("cancelled") ~%]
            </bdi>)</span>
    [%- END -%]
[%- END -%]

[%~ MACRO artist_credit_plain(ac) BLOCK # Converted to React at root/static/scripts/common/immutable-entities.js with reduceArtistCredit
-%]
    [%- FOREACH name IN ac.names -%]
        [%- name.name -%]
        [%- name.join_phrase -%]
    [%- END -%]
[%- END -%]

[%~ MACRO artist_credit(ac) BLOCK # Converted to React at root/static/scripts/common/components/ArtistCreditLink.js
-%]
    [%- IF ac.names -%]
        [%- React.embed(c, 'static/scripts/common/components/ArtistCreditLink', {
            artistCredit => ac,
        }) -%]
    [%- END -%]
[%- END -%]

[%~ MACRO expanded_artist_credit_list(ac) IF ac -%]
  [%- IF ac.name != ac.names.0.artist.name || ac.names.size > 1 || ac.names.0.artist.comment -%]
    [%- SET artist_list = [];
        SET show_list = 0;
        FOR name=ac.names;
          IF name.artist.name != name.name;
            artist_list.push(l('{artist} as {name}', { artist => descriptive_link(name.artist), name => html_escape(name.name)}));
            SET show_list = 1;
          ELSE;
            artist_list.push(descriptive_link(name.artist));
            IF name.artist.comment;
              SET show_list = 1;
            END;
          END;
        END; -%]
    [%- IF show_list -%]<span class="expanded-ac-list">[%- comma_only_list(artist_list) -%]</span>[%- END -%]
  [% END %]
[%- END -%]

[%~ MACRO expanded_artist_credit(ac) IF ac -%]
  [%- artist_credit(ac) -%]<br />
  [%- expanded_artist_credit_list(ac) -%]<br />
[%- END -%]

[%~ MACRO entity_exists(entity) BLOCK; entity.gid.defined; END -%]

[%~ MACRO link_entity(entity, action, text, credited_as, no_escape) BLOCK; # Converted to React at root/static/scripts/common/components/EntityLink.js
    # no_escape is only available for artists and recordings
    show_disambiguation = text == '';
    IF (NOT text.defined OR text == '');
        text = credited_as;
    END;
    IF entity.gid;
      IF    entity.isa('MusicBrainz::Server::Entity::Artist'); link_artist(entity, action, text, no_escape);
      ELSIF entity.isa('MusicBrainz::Server::Entity::Area'); link_area(entity, action, text);
      ELSIF entity.isa('MusicBrainz::Server::Entity::Collection'); link_collection(entity, action, text);
      ELSIF entity.isa('MusicBrainz::Server::Entity::Work'); link_work(entity, action, text);
      ELSIF entity.isa('MusicBrainz::Server::Entity::Event'); link_event(entity, action, text);
      ELSIF entity.isa('MusicBrainz::Server::Entity::Instrument'); link_instrument(entity, action, text);
      ELSIF entity.isa('MusicBrainz::Server::Entity::Label'); link_label(entity, action, text);
      ELSIF entity.isa('MusicBrainz::Server::Entity::Place'); link_place(entity, action, text);
      ELSIF entity.isa('MusicBrainz::Server::Entity::Release'); link_release(entity, action, text);
      ELSIF entity.isa('MusicBrainz::Server::Entity::ReleaseGroup'); link_release_group(entity, action, text);
      ELSIF entity.isa('MusicBrainz::Server::Entity::Recording'); link_recording(entity, action, text, no_escape);
      ELSIF entity.isa('MusicBrainz::Server::Entity::Series'); link_series(entity, action, text);
      ELSIF entity.isa('MusicBrainz::Server::Entity::URL'); link_url(entity, action, text);
      END;
    ELSIF entity.isa('MusicBrainz::Server::Entity::URL');
      simple_link(entity.href_url, entity.pretty_name);
      ' ';
      INCLUDE '_link_deleted' text='[' _ l('info') _ ']';
    ELSIF entity.isa('MusicBrainz::Server::Entity::Editor');
      link_editor(entity, action, text);
    ELSE;
      INCLUDE '_link_deleted' entity=entity text=text no_escape=no_escape;
    END;
    disambiguation(entity) IF show_disambiguation;
END -%]

[%~ BLOCK _link_deleted; # Converted to React at root/static/scripts/common/components/EntityLink.js
    # parameters: entity, text, no_escape
      SET text = html_escape(text) UNLESS no_escape;
      SET text = html_escape(entity.name) IF text == '';
      SET text = html_escape(l('[removed]')) IF text == '';
      caption = allow_new
        ? l("This entity will be created by this edit.")
        : l("This entity has been removed, and cannot be displayed correctly.");
      '<span class="' _ (!allow_new && ('deleted' _ ' ')) _ 'tooltip" title="' _ html_escape(caption) _ '">' _
        '<bdi>' _ text _ '</bdi>' _
      '</span>';
    END; -%]

[%~ MACRO descriptive_link(entity, credited_as) # Converted to React at root/static/scripts/common/components/DescriptiveLink.js
    IF entity.artist_credit.defined;
        l('{entity} by {artist}', { entity => link_entity(entity, 'show', '', credited_as),
                                    artist => artist_credit(entity.artist_credit) });
    ELSIF get_entity_type(entity) == 'place' && entity.area.defined;
        l('{place} in {area}', { place => link_entity(entity, 'show', '', credited_as),
                                 area => link_area_with_containment(entity.area) });
    ELSIF get_entity_type(entity) == 'area' && entity.gid;
        link_area_with_containment(entity, 'show', '', credited_as);
    ELSE;
        link_entity(entity, 'show', '', credited_as);
    END; -%]

[%~ MACRO get_entity_type(entity) BLOCK;
    IF entity.isa('MusicBrainz::Server::Entity::Artist'); "artist";
    ELSIF entity.isa('MusicBrainz::Server::Entity::Area'); "area";
    ELSIF entity.isa('MusicBrainz::Server::Entity::Collection'); "collection";
    ELSIF entity.isa('MusicBrainz::Server::Entity::Work'); "work";
    ELSIF entity.isa('MusicBrainz::Server::Entity::Event'); "event";
    ELSIF entity.isa('MusicBrainz::Server::Entity::Instrument'); "instrument";
    ELSIF entity.isa('MusicBrainz::Server::Entity::Label'); "label";
    ELSIF entity.isa('MusicBrainz::Server::Entity::Place'); "place";
    ELSIF entity.isa('MusicBrainz::Server::Entity::Release'); "release";
    ELSIF entity.isa('MusicBrainz::Server::Entity::ReleaseGroup'); "release_group";
    ELSIF entity.isa('MusicBrainz::Server::Entity::Recording'); "recording";
    ELSIF entity.isa('MusicBrainz::Server::Entity::Series'); "series";
    ELSIF entity.isa('MusicBrainz::Server::Entity::URL'); "url";
    END;
END -%]

[%~ BLOCK _wrap_text;
    FOR option = options.reverse;
        content = SWITCH option;
            CASE 'isolate';
                '<bdi>' _ content _ '</bdi>';
            CASE 'escape';
                html_escape(content);
            CASE 'link';  # add. parameter: link, hover
                SET hover = ' title="' _ html_escape(hover) _ '"' IF hover != '';
                '<a href="' _ html_escape(link) _ '"' _ hover _ '>' _ content _ '</a>';
            CASE 'code';
                '<code>' _ content _ '</code>';
            CASE 'edits_pending';
                '<span class="mp">' _ content _ '</span>';
            CASE 'name_variation';
                '<span class="name-variation">' _ content _ '</span>';
            CASE 'flagclass';  # add. parameter: flag
                '<span class="flag flag-' _ flag _ '">' _ content _ '</span>';
            CASE 'info_link';  # add. parameter: infolink
                content _ ' [<a href="' _ html_escape(infolink) _ '">' _ l('info') _ '</a>]';
            CASE 'show_dates';
                content _ bracketedWithSpace(dates);
            CASE 'avatar'; # add. parameter: avatar
                '<img src="' _ avatar _ '" height="' _ image_size _ '" width="' _ image_size _ '" class="gravatar" alt="" />' _ content;
            CASE 'video';
                '<span class="video" title="' _ html_escape(l('This recording is a video')) _ '"></span>' _ content;
        END;
    END;
    content;
   END -%]

[%~ BLOCK _link_mbid_entity;
    # parameters: content, entity, type, action, default_content, hover, namevar, noescape
    DEFAULT action = 'show';
    link = c.get_relative_uri(c.uri_for_action('/' _ type _ '/' _ action, [ entity.gid ]));
    mod_content = content;

    options = ['link', 'isolate'];

    options.push('escape') UNLESS noescape;
    IF content == '';
        mod_content = default_content.defined ? default_content : entity.name;
    END;

    IF namevar AND action == 'show' AND content != ''
            AND (noescape ? html_unescape(content.remove('</?span\b[^>]*>')) : content) != entity.name;
        options.unshift('name_variation');
        hover = hover != '' ? l('{name} – {additional_info}', { name => entity.name, additional_info => hover })
                            : entity.name;
    END;

    options.unshift('edits_pending') IF entity.edits_pending AND action == 'show';

    IF action == 'show' AND entity.iso_3166_1.0;
        options.unshift('flagclass');
        flag = entity.iso_3166_1.0;
    END;

    IF type == 'event' AND content == '';
        options.unshift('show_dates');
        dates = entity.formatted_date;
    END;

    IF type == 'url' AND content == '';
        mod_content = entity.pretty_name;
        options.unshift('info_link');
        infolink = link;
        link = entity.href_url;
    END;

    IF action == 'show' AND type == 'recording' AND entity.video;
        options.unshift('video');
    END;

    INCLUDE _wrap_text options=options content=mod_content link=link hover=hover flag=flag infolink=infolink dates=dates;
END -%]

[%~ BLOCK _link_other_entity;
    # parameters: content, action, type, default_content, action_params, edits_pending, code_tag, avatar
    DEFAULT action = 'show';
    SET action_params = [] UNLESS action_params.size;
    action_params.push(default_content);
    link = c.get_relative_uri(c.uri_for_action('/' _ type _ '/' _ action, action_params));
    mod_content = content != '' ? content : default_content;

    options = ['escape'];
    options.unshift('code') IF code_tag;
    options.unshift('isolate');
    options.unshift('avatar') IF avatar;
    options.unshift('link');
    options.unshift('edits_pending') IF edits_pending AND action == 'show';

    INCLUDE _wrap_text options=options content=mod_content link=link avatar=avatar image_size=image_size;
END -%]

[%~ MACRO link_work(work, action, text) BLOCK;
    INCLUDE _link_mbid_entity entity=work type='work' action=action content=text;
END -%]

[%~ MACRO link_instrument(instrument, action, text) BLOCK;
    INCLUDE _link_mbid_entity entity=instrument type='instrument' action=action content=text default_content=instrument.l_name;
END -%]

[%~ MACRO link_label(label, action, text) BLOCK;
    INCLUDE _link_mbid_entity entity=label type='label' action=action content=text;
END -%]

[%~ MACRO link_artist(artist, action, text, no_escape) BLOCK;
    hover = artist.sort_name _ bracketedWithSpace(artist.comment);
    INCLUDE _link_mbid_entity entity=artist type='artist' action=action content=text hover=hover namevar=1 noescape=no_escape;
END -%]

[%~ MACRO link_area(area, action, text) BLOCK;
    INCLUDE _link_mbid_entity entity=area type='area' action=action content=text default_content=area.l_name;
END -%]

[%~ MACRO link_area_containment(area) BLOCK;
    link_areas = [];
    FOR area=area.containment;
      link_areas.push(link_area(area));
    END;
    comma_only_list(link_areas);
END -%]

[%~ MACRO link_area_with_containment(area, action, text, credited_as) BLOCK;
    link_entity(area, action, text, credited_as);
    containment_link = link_area_containment(area);
    IF containment_link; ', ' _ containment_link; END;
END -%]

[%~ MACRO link_place(place, action, text) BLOCK;
    INCLUDE _link_mbid_entity entity=place type='place' action=action content=text;
END -%]

[%~ MACRO link_collection(collection, action, text) BLOCK;
    INCLUDE _link_mbid_entity entity=collection type='collection' action=action content=text;
END -%]

[%~ MACRO link_event(event, action, text) BLOCK;
    INCLUDE _link_mbid_entity entity=event type='event' action=action content=text;
END -%]

[%~ MACRO link_release(release, action, text) BLOCK;
    INCLUDE _link_mbid_entity entity=release type='release' action=action content=text;
END -%]

[%~ MACRO link_release_group(rg, action, text) BLOCK;
    INCLUDE _link_mbid_entity entity=rg type='release_group' action=action content=text;
END -%]

[%~ MACRO link_recording(recording, action, text, no_escape) BLOCK;
    INCLUDE _link_mbid_entity entity=recording type='recording' action=action content=text namevar=1 noescape=no_escape;
END -%]

[%~ MACRO link_series(series, action, text) BLOCK;
    INCLUDE _link_mbid_entity entity=series type='series' action=action content=text;
END -%]

[%~ MACRO link_url(url, action, text) BLOCK;
    INCLUDE _link_mbid_entity entity=url type='url' action=action content=text;
END -%]

[%~ MACRO link_tag(tag, action, text) BLOCK;
    INCLUDE _link_other_entity content=text action=action type='tag' default_content=tag.name;
END -%]

[%~ MACRO link_isrc(isrc, action, text) BLOCK;
    INCLUDE _link_other_entity content=text action=action type='isrc' default_content=isrc.isrc edits_pending=isrc.edits_pending code_tag=1;
END -%]

[%~ MACRO link_iswc(iswc, action, text) BLOCK;
    INCLUDE _link_other_entity content=text action=action type='iswc' default_content=iswc.iswc edits_pending=iswc.edits_pending code_tag=1;
END -%]

[%~ MACRO link_cdtoc(cdtoc, action, text) BLOCK;
    INCLUDE _link_other_entity content=text action=action type='cdtoc' default_content=cdtoc.discid;
END -%]

[%~ MACRO link_cdstub(cdstub, action, text) BLOCK; # Converted to React at root/static/scripts/common/components/CDStubLink.js
    INCLUDE _link_other_entity content=text action=action type='cdstub' default_content=cdstub.discid;
END -%]

[%~ MACRO gravatar(email) FILTER gravatar; email; END -%]

[%~ MACRO link_editor(editor, action, text, size) BLOCK;
    DEFAULT action = 'profile';
    DEFAULT size = 12;
    IF editor.preferences.show_gravatar;
      image_url = gravatar(editor.email) _ '&amp;s=' _ size*2;
    ELSE;
      image_url = '//gravatar.com/avatar/placeholder?d=mm&amp;s=' _ size*2;
    END;
    INCLUDE _link_other_entity content=text action=action type='user' default_content=editor.name avatar=image_url image_size=size;
END -%]

[%~ MACRO editor_type_info(editor) BLOCK; -%]
    [% IF editor.is_limited; '<span class="editor-class">(<span class="tooltip" title="' _ l('This user is new to MusicBrainz.') _ '">' _ l('beginner') _ '</span>)</span>'; END %]
    [% IF editor.is_bot; '<span class="editor-class">(<span class="tooltip" title="' _ l('This user is automated.') _ '">' _ l('bot') _ '</span>)</span>'; END %]
[%- END -%]

[%~ MACRO link_edit(edit, action, text) BLOCK;
    INCLUDE _link_other_entity content=text action=action type='edit' default_content=edit.id;
END -%]

[%~ MACRO link_searchable_property(search_field, search_value, entity_type, text) BLOCK # Converted to React at root/components/LinkSearchableProperty.js -%]
  [%- text = text == '' ? search_value : text -%]
  [%- search_field = search_value == '*' ? '-' _ search_field : search_field -%]
  [%- -%]<a href="[% c.uri_for('/search', {query => search_field _ ':' _ search_value, type => entity_type, limit => 25, method => 'advanced'}) | html %]">
      [%- text -%]</a>
[%- END -%]

[%~ MACRO login_url(redirect) BLOCK;
    c.uri_for_action('/user/login', { uri => c.req.query_params.uri || redirect || c.relative_uri });
END -%]

[%~ MACRO register_url(redirect) BLOCK;
    c.uri_for_action('/account/register', { uri => c.req.query_params.uri || redirect || c.relative_uri });
END -%]

[%~ MACRO simple_link(url, text) BLOCK; # url may be a string or a URI object
    INCLUDE _wrap_text options=['link', 'escape'] content=text link=url;
END -%]

[%~ MACRO request_login(text) BLOCK; # Converted to React at root/components/RequestLogin.js
    simple_link(login_url(), text || l('Log in'));
END -%]

[%~ MACRO tagger_icon(entity) BLOCK -%]
    [%- React.embed(c, 'static/scripts/common/components/TaggerIcon', {entity => entity}) -%]
[%- END -%]

[%~ MACRO release_label_list(labels) BLOCK; # Converted to React at root/components/ReleaseLabelList.js
    out = [];
    seen = {};
    FOR label=labels;
      IF label.label.gid AND !seen.${ label.label.gid };
        out.push(link_entity(label.label));
        seen.${ label.label.gid } = 1;
      END;
    END;
    comma_only_list(out);
END -%]

[%~ MACRO release_catno_list(labels) BLOCK; # Converted to React at root/components/ReleaseCatnoList.js
    out = [];
    seen = {};
    FOR label=labels;
      IF label.catalog_number AND !seen.${ label.catalog_number };
        out.push('<span class="catalog-number">' _ label.catalog_number _ '</span>');
        seen.${ label.catalog_number } = 1;
      END;
    END;
    comma_only_list(out);
END -%]

[%~ MACRO entity_label(type) BLOCK;
    IF type == 'artist'; l('Artist:');
    ELSIF type == 'area'; l('Area:');
    ELSIF type == 'event'; l('Event:');
    ELSIF type == 'instrument'; l('Instrument:');
    ELSIF type == 'label'; l('Label:');
    ELSIF type == 'place'; l('Place:');
    ELSIF type == 'release'; l('Release:');
    ELSIF type == 'release_group'; l('Release group:');
    ELSIF type == 'recording'; l('Recording:');
    ELSIF type == 'series'; lp('Series:', 'singular');
    ELSIF type == 'work'; l('Work:');
    ELSIF type == 'url'; l('URL:');
    END;
END -%]

[%~ MACRO format_entity_type_name(type_name) BLOCK # Converted to React at root/components/formatEntityTypeName.js -%]
    [%- IF    type_name == 'artist'; l('Artist');
        ELSIF type_name == 'area'; l('Area');
        ELSIF type_name == 'event'; l('Event');
        ELSIF type_name == 'collection'; l('Collection');
        ELSIF type_name == 'instrument'; l('Instrument');
        ELSIF type_name == 'place'; l('Place');
        ELSIF type_name == 'release'; l('Release');
        ELSIF type_name == 'recording'; l('Recording');
        ELSIF type_name == 'release_group'; l('Release Group');
        ELSIF type_name == 'series'; lp('Series', 'singular');
        ELSIF type_name == 'work'; l('Work');
        ELSIF type_name == 'label'; l('Label');
        ELSIF type_name == 'url'; l('URL');
    END -%]
[%- END -%]

[%~ MACRO format_plural_entity_type_name(type_name) BLOCK # Converted to React at root/components/formatEntityTypeName.js -%]
    [%- IF    type_name == 'artist'; l('Artists');
        ELSIF type_name == 'area'; l('Areas');
        ELSIF type_name == 'event'; l('Events');
        ELSIF type_name == 'collection'; l('Collections');
        ELSIF type_name == 'instrument'; l('Instruments');
        ELSIF type_name == 'place'; l('Places');
        ELSIF type_name == 'release'; l('Releases');
        ELSIF type_name == 'recording'; l('Recordings');
        ELSIF type_name == 'release_group'; l('Release Groups');
        ELSIF type_name == 'series'; lp('Series', 'plural');
        ELSIF type_name == 'work'; l('Works');
        ELSIF type_name == 'label'; l('Labels');
        ELSIF type_name == 'url'; l('URLs');
    END -%]
[%- END -%]

[%~ MACRO quality_name(quality) SWITCH quality;
    CASE 0;  l('Low');
    CASE 1;  l('Normal');
    CASE -1; l('Normal');
    CASE 2;  l('High');
END -%]

[%~ MACRO edit_status_class(edit) BLOCK ~%]
    [%~ IF edit.status == 1 ~%]
        [%- " open" -%]
    [%~ ELSIF edit.status == 2 ~%]
        [%- " applied" -%]
    [%~ ELSIF edit.status == 3 ~%]
        [%- " failed" -%]
    [%~ ELSIF edit.status == 8 %]
        [%- " cancelling" -%]
    [%~ ELSIF edit.status == 9 ~%]
        [%- " cancelled" -%]
    [%~ ELSE ~%]
        [%- " edit-error" -%]
    [%~ END ~%]
[%~ END ~%]

[%~ MACRO vote_tally(edit) BLOCK -%]
    [%- IF edit.auto_edit; '<strong>' _ l('automatically applied') _ '</strong>';
       ELSE; l('{yes} yes : {no} no',
        { yes => '<strong>' _ edit.yes_votes _ '</strong>',
          no => '<strong>' _ edit.no_votes _ '</strong>' });
    END -%]
[%- END -%]

[%~ MACRO display_relationship(relationship, phrase_field) BLOCK; -%]
  [%- phrase_field = phrase_field || 'phrase';
    extra_attributes_field = "extra_${phrase_field}_attributes";
    IF relationship.edits_pending; '<span class="mp mp-rel">'; END;
    IF phrase_field == "verbose_phrase";
        expand(relationship.verbose_phrase_with_placeholders, {
            entity0 => descriptive_link(relationship.source, relationship.source_credit),
            entity1 => descriptive_link(relationship.target, relationship.target_credit)
        });
    ELSE;
        relationship.${ phrase_field }; ' '; descriptive_link(relationship.target, relationship.target_credit);
    END;
    ' ';
    IF !relationship.link.begin_date.is_empty;
        ' ';
        IF !relationship.link.end_date.is_empty;
            IF relationship.link.begin_date.format == relationship.link.end_date.format;
                IF relationship.link.begin_date.day;
                    l('on {date}', { date => relationship.link.begin_date.format });
                ELSE;
                    l('in {date}', { date => relationship.link.begin_date.format });
                END;
            ELSE;
                l('from {begin_date} until {end_date}', {
                    begin_date => relationship.link.begin_date.format,
                    end_date => relationship.link.end_date.format
                });
            END;
        ELSIF relationship.link.ended;
            l('from {date} to ????', { date => relationship.link.begin_date.format });
        ELSE;
            l('from {date} to present', { date => relationship.link.begin_date.format });
        END;
    ELSIF !relationship.link.end_date.is_empty;
        ;' ';
        l('until {date}', { date => relationship.link.end_date.format });
    ELSIF relationship.link.ended;
        ' ';
        bracketedWithSpace(l('ended'));
    END;
    IF relationship.${extra_attributes_field};
        ' (' _ relationship.${extra_attributes_field} _ ')';
    END; -%]
[%- END -%]

[%~ MACRO css_class_name(name) BLOCK;
    name | lower | replace('[^a-z]+', '-') | remove('^-|-$');
    END -%]

[%~ MACRO warning_icon BLOCK # Converted to React at root/static/scripts/common/components/WarningIcon.js
-%]
   [% React.embed(c, 'static/scripts/common/components/WarningIcon') %]
[%- END -%]

[%~ MACRO error(message, class) BLOCK -%]
   <div class="warning[% ' ' _ class IF class %]">
     [%- warning_icon %]
     <p>[% l('<strong>Error</strong>:') %] [% message %]</p>
   </div>
[%- END -%]

[%~ MACRO warning(message, class) BLOCK # Converted to React at root/static/scripts/components/Warning.js
-%]
   <div class="warning[% ' ' _ class IF class %]">
     [%- warning_icon %]
     <p>[% l('<strong>Warning</strong>:') %] [% message %]</p>
   </div>
[%- END -%]

[%~ MACRO javascript_required BLOCK ~%]
    <noscript>
     [%~ warning( l("Javascript is required for this page to work properly."), "nojavascript" ) ~%]
    </noscript>
[%~ END ~%]

[%~ MACRO script_manifest(manifest, extra_attrs) BLOCK # Converted to React at root/static/manifest.js
~%]
  [%~ attr_string = '';
      FOREACH attr IN extra_attrs;
        attr_string = "$attr_string ${attr.key}=\"" _ html_escape(attr.value) _ '"';
      END
  ~%]
  <script src="[% c.model('FileCache').path_to(manifest) %]"[% attr_string %]></script>
[%~ END ~%]

[%~ MACRO css_manifest(manifest) BLOCK # Converted to React at root/static/manifest.js ~%]
  <link rel="stylesheet" type="text/css" href="[% c.model('FileCache').path_to(manifest) %]" />
[%~ END ~%]

[%~ MACRO format_length(n) BLOCK; n | format_length; END -%]

[%~ MACRO medium_format_name(medium) BLOCK # Converted to React at root/static/scripts/common/utility/mediumFormatName.js -%]
    [% medium.l_format_name or l("Medium") | html %]
[%- END -%]

[%~ MACRO medium_description(medium) BLOCK; # Converted to React at root/static/scripts/common/components/MediumDescription.js
    format_position = l('{medium_format} {position}', {
        medium_format => medium_format_name(medium),
        position => medium.position,
    });
    IF medium.name != '';
        '<span>' _ add_colon(format_position) _ '</span> <span class="medium-name">' _ isolate_text(medium.name) _ '</span>';
    ELSE;
        '<span>' _ format_position _ '</span>';
    END;
END ~%]

[%~ MACRO medium_link(medium) BLOCK; # Converted to React at root/static/scripts/common/components/MediumLink.js
    l('{medium} on {release}', {
        medium => medium_description(medium),
        release => descriptive_link(medium.release),
    });
END ~%]

[%~ MACRO medium_in_release(release, medium) BLOCK -%]
    [%- fragment = "disc" _ medium.position -%]
    <a id="[%- fragment -%]"
       href="[%- c.uri_for_action("/release/show", [ release.gid ]) _ '#' _ fragment -%]">
    [%~ medium_format_name(medium) =%]
    [%= medium.position ~%]
    [%~ IF medium.name ~%]:
       [%= medium.name | html ~%]
    [%~ END ~%]
    </a>
[%- END -%]

[%~ MACRO artist_begin_label_from_type(type_id) BLOCK ~%]
    [%~ type_id == 1 ? l('Born:') : (type_id ==  2 || type_id == 5 || type_id == 6) ? l('Founded:') : l('Begin date:') ~%]
[%~ END -%]

[%~ MACRO artist_end_label_from_type(type_id) BLOCK ~%]
    [%~ type_id == 1 ? l('Died:') : (type_id ==  2 || type_id == 5 || type_id == 6) ? l('Dissolved:') : l('End date:') ~%]
[%~ END -%]

[%~ MACRO show_wikipedia_extract BLOCK # Converted to React at root/static/scripts/common/components/WikipediaExtract.js
-%]
    [%- React.embed(c, 'static/scripts/common/components/WikipediaExtract', {
        entity => {entityType => entity.entity_type, gid => entity.gid},
        cachedWikipediaExtract => wikipedia_extract,
    }) -%]
[%- END -%]

[%~ MACRO track_duration_changes(loop_over, old_base, new_base, old_prop, new_prop) BLOCK -%]
  [% USE Diff %]
  [%- FOR i = loop_over %]
     [%- IF old_prop;
       old_length = old_base.${ loop.index }.${ old_prop } | format_length;
         ELSE;
       old_length = old_base.${ loop.index } | format_length;
         END;
         IF new_prop;
       new_length = new_base.${ loop.index }.${ new_prop } | format_length;
         ELSE;
       new_length = new_base.${ loop.index } | format_length;
         END %]
     <table class="wrap-block details">
         <tr>
             <td class="old">[%- Diff.diff_side(old_length, new_length, '-', '') -%]</td>
         </tr><tr>
             <td class="new">[%- Diff.diff_side(old_length, new_length, '+', '') -%]</td>
         </tr>
     </table>
  [%- END -%]
[%- END -%]

[%~ MACRO relationship_target_links(rel, for_grouping) BLOCK;
    '<span class="mp mp-rel">' IF rel.edits_pending;
    IF rel.target.artist_credit AND rel.target.artist_credit.name == hide_ac;
        link_entity(rel.target, 'show', '', rel.target_credit);
    ELSE;
        descriptive_link(rel.target, rel.target_credit);
    END;
    bracketedWithSpace(for_grouping ? rel.extra_grouping_phrase_attributes : rel.extra_phrase_attributes);
    bracketedWithSpace(rel.link.formatted_date);
    '</span>' IF rel.edits_pending;
END ~%]

[%~ MACRO release_event(event) BLOCK; # Converted to React at root/static/scripts/common/components/ReleaseEvent.js
      date = event.date;
      country = event.country;
      parts = [];
      parts.push(link_entity(country)) IF country.id;
      parts.push('<span class="release-date">' _ date.format _ '</span>') UNLESS date.is_empty;
      parts.join('<br />');
    END -%]

[%~ MACRO format_isni(isni) BLOCK;
      isni.replace('(.{4})(.{4})(.{4})(.{4})', '$1 $2 $3 $4');
    END -%]

[%~ MACRO country_abbr(country) BLOCK # Converted to React at root/components/CountryAbbr.js -%]
    <span class="flag flag-[% country.primary_code %]">
    <abbr title="[% html_escape(country.l_name) %]">[% country.primary_code %]</abbr>
    </span>
[%- END -%]

[%~ MACRO set_header BLOCK -%]
<!DOCTYPE html>
<html lang="[%- current_language_html -%]">
[%- END -%]

[%~ MACRO add_colon(variable) BLOCK; # Converted to React at root/static/scripts/common/i18n.js
      l('{variable}:', { variable => variable });
    END -%]

[%~ MACRO work_attributes_list(work) BLOCK # Converted to React at root/static/scripts/common/components/AttributeList.js -%]
  [%- IF work.attributes %]
    <ul>
      [%- FOR attr=work.sorted_attributes %]
      <li>[% attr.l_value | html %] ([% attr.type.l_name | html %])</li>
      [%- END %]
    </ul>
  [%- END %]
[%- END -%]

[%~ MACRO link_type_cardinality_name(cardinality) BLOCK ~%]
  [%~ IF cardinality == 0; l('Few relationships');
      ELSIF cardinality == 1; l('Many relationships');
      ELSE; l('Unknown');
  END %] ([% cardinality %])
[%~ END ~%]

[%~ MACRO orderable_direction_name(direction) BLOCK ~%]
  [%~ IF direction == 0; l('None');
      ELSIF direction == 1; l('Forward');
      ELSIF direction == 2; l('Backward');
  END %] ([% direction %])
[%~ END ~%]

[%~ MACRO data_track_icon BLOCK ~%]
  <div class="data-track icon img" title="[% l('This track is a data track.') %]"></div>
[%~ END ~%]

[%~ MACRO dismiss_banner_button(banner_name) BLOCK # Converted to React at root/layout/index.js
~%]
    <button type="button" class="dismiss-banner remove-item icon" data-banner-name="[% banner_name %]"></button>
[%~ END ~%]

[%~ MACRO duplicate_entities_section BLOCK ~%]
  <div class="row no-label">
    <div id="possible-duplicates"></div>
  </div>
[%~ END ~%]

[%~ MACRO disambiguation_error BLOCK ~%]
  [%- IF needs_disambiguation OR duplicate_violation -%]
    <div class="row no-label error">
      [%~ l('You must enter a disambiguation comment for this entity.') IF needs_disambiguation ~%]
      [%~ l('An entity with that name and disambiguation already exists. You must enter a unique disambiguation comment.') IF duplicate_violation ~%]
    </div>
  [%- END -%]
[%~ END ~%]

[%- MACRO note_anchor(edit, loop) BLOCK -%]
note-[%- edit.id -%]-[%- loop.count() -%]
[%- END -%]

[% MACRO votename(note) BLOCK %]
  [% edit = note.edit %]
  [%- FOR vote=edit.votes -%]
    [%- vote.vote_name IF (vote.editor_id == note.editor_id) && !vote.superseded -%]
  [%- END -%]
  [%- 'owner' IF edit.editor_id == note.editor_id -%]
[% END %]

[%~ MACRO edit_note_display(edit_note) BLOCK ~%]
  <div class="edit-note" id="[% note_anchor(note.edit, loop) %]">
    <h3 class="[%- votename(note) -%]">
      [%- link_entity(note.editor) -%]
      [%- FOR vote=note.edit.votes;
        IF (vote.editor_id == note.editor_id) &&
           !vote.superseded &&
           (vote.vote_name == 'No' || vote.vote_name == 'Yes');
        '<div class="voting-icon"></div>'; LAST;
      END; END; -%]
      <a href="#[% note_anchor(note.edit, loop) %]" class="date">[%- UserDate.format(note.post_time) -%]</a>
      [%- editor_type_info(note.editor) -%]
    </h3>
    <div class="edit-note-text [% 'modbot' IF note.editor_id == 4 %]">
      [%- IF note.editor_id == 4;
            note.localize;
          ELSE;
            note.text | format_editnote;
          END; -%]
    </div>
  </div>
[%~ END ~%]

[%~ MACRO bugtracker_url(description) BLOCK; # Converted to React at root/static/scripts/common/utility/bugTrackerURL.js
    'http://tickets.metabrainz.org/secure/CreateIssueDetails!init.jspa?' _
    'pid=10000&issuetype=1' _
    (description == '' ? '' : '&description=' _ uri_escape(description));
END ~%]

[%- MACRO remove_from_merge_header(to_merge) BLOCK -%] [% # Converted to React at root/components/RemoveFromMergeTableHeader.js %]
  [% IF to_merge.size > 2 %]
      <th aria-label="[% l('Remove from merge') %]" style="width: 1em" />
  [% END %]
[%- END -%]

[%- MACRO remove_from_merge(entity_type_url, to_merge) BLOCK -%] [% # Converted to React at root/components/RemoveFromMergeTableCell.js %]
  [% IF to_merge.size > 2 %]
      <td>
          <a href="/[% entity_type_url %]/merge?remove=[% entity.id %]&submit=remove">
            <button type="button" class="remove-item icon" title="[% l('Remove from merge') %]"></button>
          </a>
      </td>
  [% END %]
[%- END -%]
