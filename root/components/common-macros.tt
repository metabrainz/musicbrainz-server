[%- USE u = Utils -%]
[%- PROCESS 'components/rating-macros.tt' -%]
[%- MACRO create_guideline(text) BLOCK -%]
    <li>
        [%- text -%]
    </li>
[%- END -%]
[%-# This next could use localization for alternating comma/period use per locale -%]
[%- MACRO add_commas(n) GET n.chunk(-3).join(',') -%]
[%- MACRO replace(text, search, replace) BLOCK; text | replace(search, replace); END -%]
[%- MACRO url_escape(url) BLOCK; url | url; END -%]
[%- MACRO html_escape(url) BLOCK; url | html; END -%]
[%- MACRO display_url(url)
    IF url.pretty_name; url.pretty_name | html;
    ELSE; url | uri_decode | html;
END -%]
[%- MACRO make_ucfirst(text) BLOCK; text | ucfirst; END -%]
[%- MACRO make_lcfirst(text) BLOCK; text | lcfirst; END -%]
[%- MACRO make_upper(text) BLOCK; text | upper; END -%]
[%- MACRO make_lower(text) BLOCK; text | lower; END -%]
[%- USE UserDate(c.user.preferences) -%]
[%- USE Countdown -%]
[%- MACRO doc_link(to) BLOCK -%][% c.uri_for('/doc', to) %][%- END -%]
[%- MACRO va_doc_link BLOCK -%]
    [%- doc_link('Style/Unknown_and_untitled/Special_purpose_artist#List_of_official_SPAs') -%]
[%- END -%]


[%- MACRO wiki_history_link(server, id, version) BLOCK -%]
http://[%- server -%]/[%- id -%]?oldid=[%- version -%]
[%- END -%]

[%- MACRO l(text, args) BLOCK;
    c.gettext(text, args);
END; -%]
[%#- There is a bug in this implementation fo ngettext that is easier to fix by policy that's why it's not fixed yet.
The problem surfaces when an unfinished translation file is used, in this case a plural translation would
apply language-specific plural construction rules to the untranslated english string. If a translation language has
more than two plural forms, then the first plural form (germanic plural) is chosen for every form other than the first
two. -%]
[%- MACRO ln(text, plural, num, args) BLOCK;
    c.ngettext(text, plural, num, args);
END; -%]

[%- MACRO display_age(age, person) BLOCK;
      IF person AND age.0;
        l('aged {num}', { num => age.0 });
      ELSE;
        IF age.0;
          ln('{num} year', '{num}&nbsp;years', age.0, { num => age.0 });
        ELSIF age.1;
          ln('{num} month', '{num}&nbsp;months', age.1, { num => age.1 });
        ELSE;
          ln('{num} day', '{num}&nbsp;days', age.2, { num => age.2 });
        END;
      END;
    END -%]

[%- MACRO comma_list(items) BLOCK -%]
    [%- FOREACH item IN items -%]
        [%- item -%]
        [%- loop.count == (loop.size - 1) ? " and " : !loop.last ? ", " : "" -%]
    [%- END -%]
[%- END -%]
[%- MACRO comma_only_list(items) BLOCK -%]
    [%- FOREACH item IN items -%]
        [%- item -%]
        [%- !loop.last ? ", " : "" -%]
    [%- END -%]
[%- END -%]
[%- MACRO form_id(field)
    IF field.form;
        "form-" _ field.form.name _ "-" _ field.name.replace('_', '-');
    ELSE;
        "form-$field";
    END -%]
[%- MACRO class_html(classes)
    IF classes.size; 'class="' _ classes.join(' ') _ '"';
    ELSE; '';
    END -%]
[%-# Take type and return pluralized word form, avoids problems with '|% type %|s' #-%]
[%- MACRO get_plural_type(entity)
    SWITCH entity;
        CASE 'release';
            l('releases');
        CASE 'artist';
            l('artists');
        CASE 'label';
            l('labels');
        CASE 'track';
            l('tracks');
        CASE 'recording';
            l('recordings');
        CASE 'release_group';
            l('release groups');
        CASE 'editor';
            l('editors');
        CASE 'work';
            l('works');
        CASE DEFAULT;
            l('Error: Unknown Type');
    END -%]

[%- MACRO disambiguation(entity) BLOCK;
    ' <span class="comment">' _ html_escape("(${entity.comment})") _ '</span>' IF entity.comment;
END -%]

[%- MACRO artist_credit(ac, opts) BLOCK -%]
    [%- FOREACH name IN ac.names -%]
        [%- IF name.artist.gid && !opts.plain -%]
            [%- link_artist(name.artist, 'show', html_escape(name.name)) -%]
        [%- ELSE -%]
            [%- name.name | html -%]
        [%- END -%]
        [%- name.join_phrase | html -%]
    [%- END -%]
[%- END -%]

[%- MACRO expanded_artist_credit(ac) IF ac -%]
  [% artist_credit(ac) %]
  [% IF ac.name != ac.names.0.artist.name || ac.names.size > 1 || ac.names.0.artist.comment %]
  <ul>
    [% FOR name=ac.names %]
      <li>
      [% IF name.artist.name != name.name || name.artist.comment %]
        [% l('{artist} as {name}', { artist => descriptive_link(name.artist), name => name.name}) %]
      [% ELSE %]
        [% descriptive_link(name.artist) %]
      [% END %]
      </li>
    [% END %]
  </ul>
  [% END %]
[%- END -%]

[%- MACRO link_entity(entity, action, text) BLOCK;
    IF entity.gid;
      IF    entity.isa('MusicBrainz::Server::Entity::Artist'); link_artist(entity, action, text);
      ELSIF entity.isa('MusicBrainz::Server::Entity::Work'); link_work(entity, action, text);
      ELSIF entity.isa('MusicBrainz::Server::Entity::Label'); link_label(entity, action, text);
      ELSIF entity.isa('MusicBrainz::Server::Entity::Release'); link_release(entity, action, text);
      ELSIF entity.isa('MusicBrainz::Server::Entity::ReleaseGroup'); link_release_group(entity, action, text);
      ELSIF entity.isa('MusicBrainz::Server::Entity::Recording'); link_recording(entity, action, text);
      ELSIF entity.isa('MusicBrainz::Server::Entity::URL'); link_url(entity, action, text);
      END;
    ELSIF entity.isa('MusicBrainz::Server::Entity::URL');
      '<a href="' _ url_escape(entity.url) _ '">' _ display_url(entity.url) _ '</a> ';
      link_deleted(undef, '[info]');
    ELSIF entity.isa('MusicBrainz::Server::Entity::Editor');
      link_editor(entity, action, text);
    ELSE;
      link_deleted(entity, text);
    END;
    disambiguation(entity) UNLESS text;
END -%]

[%- MACRO link_deleted(entity, text) BLOCK;
      caption = allow_new
        ? l("This entity will be created when edits are entered.")
        : l("This entity has been removed, and cannot be displayed correctly.");
      '<span class="' _ (!allow_new && 'deleted') _ ' tooltip" title="' _ caption _ '">' _
        (html_escape(entity.name) || text || l('[removed]')) _
      '</span>';
    END; -%]

[%- MACRO descriptive_link(entity)
    IF entity.artist_credit.defined;
        l('{entity} by {artist}', { entity => link_entity(entity),
                                    artist => artist_credit(entity.artist_credit) });
    ELSE;
        l('{entity}', { entity => link_entity(entity) });
    END; -%]

[%- MACRO entity_type(entity) BLOCK;
    type = "$entity";
    IF    type.search('Entity::Artist='); "artist";
    ELSIF type.search('Entity::Work='); "work";
    ELSIF type.search('Entity::Label='); "label";
    ELSIF type.search('Entity::Release='); "release";
    ELSIF type.search('Entity::ReleaseGroup='); "release_group";
    ELSIF type.search('Entity::Recording='); "recording";
    ELSIF type.search('Entity::URL='); "url";
    END;
END -%]

[%- MACRO link_work(work, action, text) BLOCK;
    action = action || 'show';
    link = c.uri_for_action("/work/$action", [ work.gid ]);
    text = text == '' ? html_escape(work.name) : text;
    '<span class="mp">' IF work.edits_pending AND action == 'show';
    '<a href="' _ link _ '">' _ text _ '</a>';
    '</span>' IF work.edits_pending AND action == 'show';
END -%]

[%- MACRO link_label(label, action, text) BLOCK;
    action = action || 'show';
    link = c.uri_for_action("/label/$action", [ label.gid ]);
    text = text == '' ? html_escape(label.name) : text;
    '<span class="mp">' IF label.edits_pending AND action == 'show';
    '<a href="' _ link _ '">' _ text _ '</a>';
    '</span>' IF label.edits_pending AND action == 'show';
END -%]

[%- MACRO link_artist(artist, action, text) BLOCK;
    action = action || 'show';
    link = c.uri_for_action("/artist/$action", [ artist.gid ]);
    text = text == '' ? html_escape(artist.name) : text;
    hover = html_escape(artist.sort_name);
    IF artist.comment; hover = hover _ ', ' _ html_escape(artist.comment); END;
    '<span class="mp">' IF artist.edits_pending AND action == 'show';
    '<a href="' _ link _ '" title="' _ hover _ '">' _ text _ '</a>';
    '</span>' IF artist.edits_pending AND action == 'show';
END -%]

[%- MACRO link_collection(collection, action, text) BLOCK;
    action = action || 'show';
    link = c.uri_for_action("/collection/$action", [ collection.gid ]);
    text = text == '' ? html_escape(collection.name) : text;
    '<a href="' _ link _ '">' _ text _ '</a>';
END -%]

[%- MACRO link_release(release, action, text) BLOCK;
    action = action || 'show';
    link = c.uri_for_action("/release/$action", [ release.gid ]);
    text = text == '' ? html_escape(release.name) : text;
    '<span class="mp">' IF release.edits_pending AND action == 'show';
    '<a href="' _ link _ '">' _ text _ '</a>';
    '</span>' IF release.edits_pending AND action == 'show';
END -%]

[%- MACRO link_release_group(rg, action, text) BLOCK;
    action = action || 'show';
    link = c.uri_for_action("/release_group/$action", [ rg.gid ]);
    text = text == '' ? html_escape(rg.name) : text;
    '<span class="mp">' IF rg.edits_pending AND action == 'show';
    '<a href="' _ link _ '">' _ text _ '</a>';
    '</span>' IF rg.edits_pending AND action == 'show';
END -%]

[%- MACRO link_recording(recording, action, text) BLOCK;
    action = action || 'show';
    link = c.uri_for_action("/recording/$action", [ recording.gid ]);
    text = text == '' ? html_escape(recording.name) : text;
    '<span class="mp">' IF recording.edits_pending AND action == 'show';
    '<a href="' _ link _ '">' _ text _ '</a>';
    '</span>' IF recording.edits_pending AND action == 'show';
END -%]

[%- MACRO link_tracklist(tracklist, action, text) BLOCK;
    action = action || 'show';
    link = c.uri_for_action("/tracklist/$action", [ tracklist.id ]);
    text = text == '' ? html_escape(tracklist.medium.name) : text;
    '<a href="' _ link _ '">' _ text _ '</a>';
END -%]

[%- MACRO link_url(url, action, text) BLOCK;
    action = action || 'show';
    link = c.uri_for_action("/url/$action", [ url.gid ]);
    '<span class="mp">' IF url.edits_pending AND action == 'show';
    IF text != '';
      '<a href="' _ link _ '">' _ html_escape(text) _ '</a>';
      '</span>' IF url.edits_pending AND action == 'show';
    ELSE;
      text = display_url(url);
      '<a href="' _ url.affiliate_url _ '">' _ text _ '</a >';
      '</span>' IF url.edits_pending AND action == 'show';
      ' [<a href="' _ link _ '">' _ l('info') _ '</a>]';
    END;
END -%]

[%- MACRO link_tag(tag, action, text) BLOCK;
    action = action || 'show';
    link = c.uri_for_action("/tag/$action", [ tag.name ]);
    text = text == '' ? html_escape(tag.name) : text;
    '<a href="' _ link _ '">' _ text _ '</a>';
END -%]

[%- MACRO link_puid(puid, action, text) BLOCK;
    action = action || 'show';
    link = c.uri_for_action("/puid/$action", [ puid.puid ]);
    text = text == '' ? '<code>' _ html_escape(puid.puid) _ '</code>' : text;
    '<a href="' _ link _ '">' _ text _ '</a>';
END -%]

[%- MACRO link_isrc(isrc, action, text) BLOCK;
    action = action || 'show';
    link = c.uri_for_action("/isrc/$action", [ isrc ]);
    '<span class="mp">' IF isrc.edits_pending AND action == 'show';
    text = text == '' ? '<code>' _ html_escape(isrc) _ '</code>' : text;
    '<a href="' _ link _ '">' _ text _ '</a>';
    '</span>' IF isrc.edits_pending AND action == 'show';
END -%]

[%- MACRO link_cdtoc(cdtoc, action, text) BLOCK;
    action = action || 'show';
    link = c.uri_for_action("/cdtoc/$action", [ cdtoc.discid ]);
    text = text == '' ? html_escape(cdtoc.discid) : text;
    '<a href="' _ link _ '">' _ text _ '</a>';
END -%]

[%- MACRO link_cdstub(cdstub, action, text) BLOCK;
    action = action || 'show';
    link = c.uri_for_action("/cdstub/$action", [ cdstub.discid ]);
    text = text == '' ? html_escape(cdstub.discid) : text;
    '<a href="' _ link _ '">' _ text _ '</a>';
END -%]

[%- MACRO link_freedb(freedb, action, text) BLOCK;
    action = action || 'import';
    link = c.uri_for_action("/freedb/$action", [ freedb.category, freedb.discid ]);
    text = text == '' ? html_escape(freedb.discid) : text;
    '<a href="' _ link _ '">' _ text _ '</a>';
END -%]

[%- MACRO link_editor(editor, action, text) BLOCK;
    action = action || 'profile';
    link = c.uri_for_action("/user/$action", [ editor.name ]);
    text = text == '' ? html_escape(editor.name) : text;
    '<a href="' _ link _ '">' _ text _ '</a>';
END -%]

[%- MACRO link_edit(edit, action, text) BLOCK;
    action = action || 'show';
    link = c.uri_for_action("/edit/$action", [ edit.id ]);
    text = text == '' ? html_escape(edit.id) : text;
    '<a href="' _ link _ '">' _ text _ '</a>';
END -%]

[%- MACRO login_url(redirect) BLOCK;
    c.uri_for_action('/user/login', { uri => c.req.query_params.uri || redirect || c.relative_uri });
END-%]

[%- MACRO simple_link(url, text) BLOCK %]
    <a href="[% url %]">[% text %]</a>
[%- END -%]

[%- MACRO request_login(text) BLOCK -%]
<a href="[% login_url() %]">[% text || l('Log in') %]</a>
[%- END -%]

[%- MACRO tagger_icon(entity) BLOCK -%]
    [%- IF entity.isa('MusicBrainz::Server::Entity::Release') -%]
        [% USE date %]
        <a href="http://127.0.0.1:[% c.session.tport %]/openalbum?id=[% entity.gid %]&t=[% date.now %]"
            target="tagger-iframe" class="tagger-icon" title="[% l('Open in tagger') %]">
            <img src="[% c.uri_for('/static/images/icons/mblookup-tagger.png') %]" alt="[% l('Tagger') %]" />
        </a>
    [%- ELSIF entity.isa('MusicBrainz::Server::Entity::Recording') -%]
        <a href="http://127.0.0.1:[% c.session.tport %]/opennat?id=[% entity.gid %]"
            target="tagger-iframe" class="tagger-icon" title="[% l('Open in tagger') %]">
            <img src="[% c.uri_for('/static/images/icons/mblookup-tagger.png') %]" alt="[% l('Tagger') %]" />
        </a>
    [%- END -%]
[%- END -%]

[%- MACRO piped_link_list(list) BLOCK -%]
[
[% FOR item IN list %]
  <a href="[% item.link %]">[% item.text %]</a> [% UNLESS loop.last %] | [% END %]
[% END %]
]
[%- END -%]

[%- MACRO release_label_list(labels) BLOCK;
    out = [];
    FOR label=labels;
      out.push(link_entity(label.label)) IF label.label_id;
    END;
    out.join(', ');
END -%]

[%- MACRO release_catno_list(labels) BLOCK;
    out = [];
    out.push(label.catalog_number) FOR label=labels;
    out.join(', ');
END -%]

[%- MACRO sortble_table_header(name, label) BLOCK -%]
    <th>
        <a href="[% c.req.uri_with( order => order == name ? '-' _ name : name ) %]">[% label %]</a>
        [%- IF order == name %]&nbsp;&#9652;[% ELSIF order == '-' _ name %]&nbsp;&#9662;[% END %]
    </th>
[%- END -%]

[%- MACRO entity_label(type) BLOCK;
    IF type == 'artist'; l('Artist:');
    ELSIF type == 'label'; l('Label:');
    ELSIF type == 'release'; l('Release:');
    ELSIF type == 'release_group'; l('Release group:');
    ELSIF type == 'recording'; l('Recording:');
    ELSIF type == 'work'; l('Work:');
    ELSIF type == 'url'; l('URL:');
    END;
END -%]

[%- MACRO use_in_relationship(entity) BLOCK;
    UNLESS c.session.relationship.id == entity.id;
      text = c.session.relationship ? l('Create relationship with {other}', { other => c.session.relationship.name })
                                    : l('Use in a relationship');
      '<li>' _ link_entity(entity, 'relate', text) _ '</li>';
    END;
    IF c.session.relationship.id;
      text = l('Cancel creating relationship with {name}', { name => c.session.relationship.name });
      '<li>' _ link_entity(entity, 'cancel_relate', text) _ '</li>';
    END;
END -%]

[%- MACRO relate_to_url(entity) BLOCK;
    uri = c.uri_for_action('/edit/relationship/create_url', {
                        type => entity_type(entity),
                        entity => entity.gid
                   });
    l('{uri|Relate to URL}', { uri => html_escape(uri) });
END -%]

[%- MACRO relate_to_ellipsis(entity, endpoints) BLOCK -%]
    <a href="#relate_to">[%- l('Relate to ...') -%]</a>
    <div style="position: absolute;">
      <div class="relate-to" style="display: none">
        <input type="hidden" class="gid" value="[% entity.gid %]" />
        <input type="hidden" class="type" value="[% entity_type(entity) %]" />
        <select style="width: 130px; margin-right: 4px;">
          <option value="artist">[% l('Artist') %]</option>
          <option value="label">[% l('Label') %]</option>
          <option value="recording">[% l('Recording') %]</option>
          <option value="release-group">[% l('Release Group') %]</option>
          <option value="release">[% l('Release') %]</option>
          <option value="work">[% l('Work') %]</option>
        </select>
        <span class="autocomplete">
          <img class="search" src="[% c.uri_for("/static/images/icons/search.png") %]" />
          <input type="text" class="name" value="" style="width: 170px;" />
          <input type="hidden" class="id" value=""  />
          <input type="hidden" class="gid" value=""  />
        </span>
        [% IF endpoints.size %]
        <select class="endpoint">
          [% FOR endpoint=endpoints %]
          <option value="[% endpoint %]">
          [% SWITCH endpoint;
               CASE 'release'; l('Relate to release');
               CASE 'recording'; l('Relate to recordings');
             END %]
          </option>
          [% END %]
        </select>
        [% END %]
        <br />
        <div class="buttons" style="margin-top: 0.5em; width: 100%;">
          <input class="negative button cancel" type="button" value="[% l('Cancel') %]" style="float: left;" />
          <input class="positive button create" type="button" value="[% l('Create relationship') %]" style="float: right;" />
        </div>
      </div>
    </div>
[%- END -%]

[%- MACRO quality_name(quality) SWITCH quality;
    CASE 0;  l('Low');
    CASE 1;  l('Normal');
    CASE -1; l('Normal');
    CASE 2;  l('High');
END -%]

[%- MACRO edit_conditions(expire_action) SWITCH expire_action;
    CASE 1; l('Accept upon expiration');
    CASE 2; l('Reject upon expiration');
END -%]

[%-# See /lib/MusicBrainz/Server/Edit/Utils.pm for status names -%]
[%- MACRO edit_status_description(edit) SWITCH edit.status;
        CASE 1; l('This edit is open and awaiting votes before it can be applied.');
        CASE 2; l('This edit has been successfully applied.');
        CASE 3; l('This edit failed because there were insufficient "yes" votes.');
        CASE 4; l('This edit failed either because an entity it was modifying no longer
                   exists, or the entity can not be modified in this manner anymore.');
        CASE 5; l('This edit failed due to an internal error and may need to be
                   entered again.');
        CASE 6; l('This edit failed because the data it was changing was modified
                   after this edit was created. This may happen when the same edit
                   is entered in twice; one will pass but the other will fail.');
        CASE 7; l('This edit failed because it affected high quality data and
                   did not receive any votes.');
        CASE 8; l('This edit was recently cancelled.');
        CASE 9; l('This edit was cancelled.');
END -%]

[%- MACRO expiration_time(datetime) BLOCK -%]
    [% IF Countdown.in_the_future(datetime) # Make sure datetime is a "countdownable" date %]
        [% IF Countdown.total_days(datetime) > 0 # If the date is far away, only display days %]
            [% l('Expires in <span class="tooltip" title="{exactdate}">{days}</span>',
                { days => ln('{num} day', '{num} days', Countdown.total_days(datetime),
                            { num => Countdown.total_days(datetime) })
                  exactdate => UserDate.format(datetime) }) %]
        [% ELSIF Countdown.hours(datetime) > 0 # Show hours and minutes %]
            [% l('Expires in <span class="tooltip" title="{exactdate}">{hours}, {minutes}</span>',
                { hours   => ln('{num} hour', '{num} hours', Countdown.hours(datetime),
                               { num => Countdown.hours(datetime) }),
                  minutes => ln('{num} minute', '{num} minutes', Countdown.minutes(datetime),
                               { num => Countdown.minutes(datetime) })
                  exactdate => UserDate.format(datetime) }) %]
        [% ELSE # Only show minutes %]
            [% l('Expires in <span class="tooltip" title="{exactdate}">{minutes}</span>',
                { minutes => ln('{num} minute', '{num} minutes', Countdown.minutes(datetime),
                               { num => Countdown.minutes(datetime) })
                  exactdate => UserDate.format(datetime) }) %]
        [% END %]
    [% ELSE %]
        [% l('Already expired') %]
    [% END %]
[%- END -%]

[%- MACRO age(datetime) BLOCK -%]
    [%- Age.format(datetime, "{age} ago") -%]
[%- END -%]

[%- MACRO display_relationship(relationship, phrase_field) BLOCK; -%]
            [% phrase_field = phrase_field || 'phrase' %]
            [%- IF relationship.edits_pending %]<span class="mp">[% END -%]
            [%- relationship.${phrase_field} | html %]
            [% descriptive_link(relationship.target) %]
            [%- IF !relationship.link.begin_date.is_empty -%]
                [%- IF !relationship.link.end_date.is_empty -%]
                    [%- IF relationship.link.begin_date.format == relationship.link.end_date.format -%]
                        [%- IF relationship.link.begin_date.day -%]
                            [% l('on {date}', { date => relationship.link.begin_date.format }) %]
                        [%- ELSE -%]
                            [% l('in {date}', { date => relationship.link.begin_date.format }) %]
                        [%- END -%]
                    [%- ELSE -%]
                        [% l('from {begin_date} until {end_date}', {
                            begin_date => relationship.link.begin_date.format,
                            end_date => relationship.link.end_date.format
                        }) %]
                    [%- END -%]
                [%- ELSE -%]
                    [% l('from {date} to present', { date => relationship.link.begin_date.format }) %]
                [%- END -%]
            [%- ELSIF !relationship.link.end_date.is_empty -%]
                [% l('until {date}', { date => relationship.link.end_date.format }) %]
            [%- END -%]
[%- END -%]

[%- MACRO trusted_domain(url) BLOCK;
    url.url.host.search('discogs.com$')   ||
    url.url.host.search('wikipedia.org$') ||
    url.url.host.search('bbc.co.uk$')     ||
    url.url.host.search('facebook.com$')  ||
    url.url.host.search('myspace.com$')   ||
    url.url.host.search('last.fm$')       ||
    url.url.host.search('imdb.com$')      ||
    url.url.host.search('myspace.com$')   ||
    url.url.host.search('twitter.com$')   ||
    url.url.host.search('youtube.com$')   ||
    0;
END -%]

[% MACRO favicon_class(url)
       IF url.url.host.search('amazon'); 'amazon';
    ELSIF url.url.host.search('allmusic.com'); 'allmusic';
    ELSIF url.url.host.search('wikipedia.org$'); 'wikipedia';
    ELSIF url.url.host.search('facebook.com'); 'facebook';
    ELSIF url.url.host.search('last.fm'); 'lastfm';
    ELSIF url.url.host.search('myspace.com'); 'myspace';
    ELSIF url.url.host.search('twitter.com'); 'twitter';
    ELSIF url.url.host.search('youtube.com'); 'youtube';
    ELSIF url.url.host.search('discogs.com'); 'discogs';
    ELSIF url.url.host.search('secondhandsongs.com'); 'secondhandsongs';
    ELSIF url.url.host.search('songfacts.com'); 'songfacts';
    ELSIF url.url.host.search('soundcloud.com'); 'soundcloud';
    ELSE; '';
END %]

[%- MACRO warning_icon BLOCK -%]
   <img class="warning" src="[% c.uri_for('/static/images/icons/warning.png') %]" />
[%- END -%]

[%- MACRO error(message, class) BLOCK -%]
   <div class="warning[% ' ' _ class IF class %]">
     [%- warning_icon %]
     <p>[% l('<strong>Error</strong>:') %] [% message %]</p>
   </div>
[%- END -%]

[%- MACRO warning(message, class) BLOCK -%]
   <div class="warning[% ' ' _ class IF class %]">
     [%- warning_icon %]
     <p>[% l('<strong>Warning</strong>:') %] [% message %]</p>
   </div>
[%- END -%]

[%- MACRO notice(message) BLOCK -%]
   <div class="notice">
     <p>[% l('<strong>Note</strong>:') %] [% message %]</p>
   </div>
[%- END -%]

[%- MACRO wiki_link(server, id) BLOCK -%]
http://[%- server -%]/[%- id -%]"
[%- END -%]

[%- MACRO script_manifest(manifest) BLOCK -%]
  [%- IF server_details.developement_server -%]
    [%- USE date -%]
    [%- FOR file IN c.model('FileCache').manifest_files(manifest, 'js'); -%]
        <script src="[% c.uri_for("/static/") %][%- file -%]?t=[% date.now %]"></script>
    [%- END -%]
  [%- ELSE -%]
    <script src="[% c.uri_for("/static/") %][% c.model('FileCache').manifest_signature(manifest, 'js') %].js"></script>
  [%- END -%]
[%- END -%]

[%- MACRO css_manifest(manifest) BLOCK -%]
  [%- IF server_details.developement_server -%]
    [%- USE date -%]
    [%- FOR file IN c.model('FileCache').manifest_files(manifest, 'css'); -%]
        <link rel="stylesheet" type="text/css" href="[% c.uri_for("/static/") %][%- file -%]?t=[% date.now %]" />
    [%- END -%]
  [%- ELSE -%]
    <link rel="stylesheet" type="text/css" href="[% c.uri_for('/static/styles/') %][% c.model('FileCache').manifest_signature(manifest, 'css') %].css" />
  [%- END -%]
[%- END -%]

[%- MACRO format_length(n) BLOCK; n | format_length; END %]

[%- MACRO medium_link(medium) BLOCK -%]
  [% medium.format_name or l("Medium") | html %] [% medium.position %][% IF medium.name %]:
  [% medium.name | html %][% END %] on [% descriptive_link(medium.release) %]
[%- END -%]
