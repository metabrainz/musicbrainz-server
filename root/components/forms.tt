[%- MACRO form_submit(label, class) BLOCK # Converted to React at root/components/FormSubmit.js
~%]
    <span class="buttons[% ' ' _ class IF class %]">
        [%~ '<button type="submit">' _ label _ '</button>' ~%]
    </span>
[%~ END -%]

[%- MACRO make_votable(ko) BLOCK # Converted to React at root/components/EnterEdit.js
-%]
    <div class="row no-label">
      <div class="auto-editor">
        [% IF ko %]
          <label>
            <input class="make-votable" type="checkbox" data-bind="checked: makeVotable" />
            [% l('Make all edits votable.') -%]
          </label>
        [% ELSE %]
          [%- USE r = FormRenderer(form) -%]
          [%- r.checkbox('make_votable') -%]
          [%- r.label('make_votable', l('Make all edits votable.'), inline => 1) -%]
        [% END %]
      </div>
    </div>
[%- END -%]

[%- MACRO edit_note(hide_help, ko) BLOCK # Converted to React at root/components/EnterEditNote.js
-%]
  [% UNLESS hide_help %]
    <p>
      [% l('Entering an {note|edit note} that describes where you got your information is highly recommended. Not only does it make it clear where you got your information, but it can also encourage other users to vote on your edit &#x2014; thus making your edit get applied faster.', { note => { href => doc_link('Edit_Note'), target => '_blank' } }) %]
    </p>
    <p>[% l('Even just providing a URL or two is helpful! For more suggestions, see {doc_how_to|our guide for writing good edit notes}.', { doc_how_to => { href => doc_link('How_to_Write_Edit_Notes'), target => '_blank' } }) %]</p>
  [% END %]
  [% WRAPPER form_row %]
    [% IF ko %]
      <label for="edit-note-text">[% l('Edit note:') %]</label>
      <textarea id="edit-note-text" data-bind="value: editNote, valueUpdate: 'input'" rows="5" cols="80"></textarea>
    [% ELSE %]
      [% USE r = FormRenderer(form) %]
      [% r.label('edit_note', l('Edit note:')) %]
      [% r.textarea('edit_note', { class => 'edit-note', cols => 80, rows => 5 }) %]
      [% field_errors(form, 'edit_note') %]
    [% END %]
  [% END %]
[%- END -%]

[%- MACRO enter_edit(extra) BLOCK # Converted to React at root/components/EnterEdit.js
-%]
    [%- make_votable() -%]
    <div class="row no-label buttons">
        <button type="submit" class="submit positive">[% l('Enter edit') %]</button>
        [% extra %]
    </div>
[%- END -%]

[%- MACRO field_errors(form, field_name, has_html_errors) BLOCK # Converted to React at root/components/FieldErrors.js
-%]
    [% field = form.field(field_name) || field_name %]
    [%- IF field.has_errors OR field.error_fields -%]
        <ul class="errors">
          [%- FOR err IN field.errors -%]
            [%- IF has_html_errors -%]
              <li>[% err %]</li>
            [% ELSE %]
              <li>[% err | html %]</li>
            [% END %]
          [%- END -%]
          [%- FOR field IN field.error_fields -%]
            [% FOR err IN field.errors %]
              [%- IF has_html_errors -%]
                <li>[% err %]</li>
              [% ELSE %]
                <li>[% err | html %]</li>
              [% END %]
            [% END %]
          [%- END -%]
        </ul>
    [%- END -%]
[%- END -%]

[%- BLOCK form_row # Converted to React at root/components/FormRow.js
-%]
    <div class="row" [% IF row_id %]id="[% row_id %]"[% END %]>
      [% content %]
    </div>
[%- END -%]

[%- MACRO form_row_text(r, field_name, label, attrs) BLOCK # Converted to React at root/components/FormRowText.js
-%]
    [% attrs = attrs ? attrs : {} %]
    [% WRAPPER form_row %]
      [% r.label(field_name, label || r.form.field(field_name).label) %]
      [% r.text(field_name, attrs) %]
      [% field_errors(r.form, field_name) %]
    [% END %]
[%- END -%]

[%- MACRO form_row_text_long(r, field_name, label) BLOCK # Converted to React at root/components/FormRowTextLong.js
-%]
    [% form_row_text(r, field_name, label, { size => 47 }) %]
[%- END -%]

[%- MACRO form_row_email_long(r, field_name, label) BLOCK # Converted to React at root/components/FormRowEmailLong.js
-%]
    [% WRAPPER form_row %]
      [% r.label(field_name, label || r.form.field(field_name).label) %]
      [% r.email(field_name, { size => 47 })  %]
      [% field_errors(r.form, field_name) %]
    [% END %]
[%- END -%]

[%- MACRO form_row_url_long(r, field_name, label) BLOCK # Converted to React at root/components/FormRowURLLong.js
-%]
    [% WRAPPER form_row %]
      [% r.label(field_name, label || r.form.field(field_name).label) %]
      [% r.url(field_name, { size => 47 })  %]
      [% field_errors(r.form, field_name) %]
    [% END %]
[%- END -%]

[%- MACRO form_row_time(r, field_name, label) BLOCK -%]
    [% WRAPPER form_row %]
      [% r.label(field_name, label || r.form.field(field_name).label) %]
      [% r.text(field_name, { size => 5, class => "time", placeholder => l("HH:MM") })  %]
      [% field_errors(r.form, field_name) %]
    [% END %]
[%- END -%]

[%- MACRO form_row_password(r, field_name, label) BLOCK -%]
    [% WRAPPER form_row %]
      [% r.label(field_name, label || r.form.field(field_name).label) %]
      [% r.password(field_name) %]
      [% field_errors(r.form, field_name) %]
    [% END %]
[%- END -%]

[%- MACRO form_row_checkbox(r, field_name, label) BLOCK # Converted to React at root/components/FormRowCheckbox.js
-%]
    <div class="row no-label">
      [% r.checkbox(field_name) %]
      [% r.label(field_name, label || r.form.field(field_name).label, inline => 1) %]
      [% field_errors(r.form, field_name) %]
    </div>
[%- END -%]

[%- MACRO form_row_select(r, field_name, label, class, attributes, has_html_errors) BLOCK # Converted to React at root/components/FormRowSelect.js
-%]
    [% attributes = attributes || {}; attributes.class = class %]
    [% WRAPPER form_row %]
      [% r.label(field_name, label || r.form.field(field_name).label, { class => class }) %]
      [% r.select(field_name, attributes) -%]
      [% field_errors(r.form, field_name, has_html_errors) %]
    [% END %]
[%- END -%]

[%- MACRO form_row_text_list(r, field_name, label, item_name) BLOCK -%]
    [% WRAPPER form_row %]
      <label>[% label || r.form.field(field_name).label %]</label>
      <div class="form-row-text-list">
          <div style="display: none;"
               class="text-list-row [%- r.form.field(field_name).html_name _ "-template" -%]">
              <input type="text" value="" class="value with-button" />
              <button type="button" class="nobutton icon remove-item" title="[% l('Remove {item}', item => item_name) %]"></button>
          </div>
          [% FOR value=r.form.field(field_name).value -%]
          <div class="text-list-row">
              <input type="text" value="[% value %]" name="[% r.form.field(field_name).html_name %].[% loop.index() %]" class="value with-button" />
              <button type="button" class="nobutton icon remove-item" title="[% l('Remove {item}', item => item_name) %]"></button>
          </div>
          [% END -%]
          <div class="form-row-add">
            <button type="button" class="with-label add-item">
              [% l('Add {item}', item => item_name) %]
            </button>
          </div>
      </div>
      <script>
         [%- IF r.form.field(field_name).value.size -%]
           MB.Form.TextList("[%- r.form.field(field_name).html_name -%]").init([% r.form.field(field_name).value.size %]);
         [%- ELSE -%]
           MB.Form.TextList("[%- r.form.field(field_name).html_name -%]").add('');
         [%- END -%]
      </script>

      [% field_errors(r.form, field_name) %]
    [% END %]
[%- END -%]

[%- MACRO form_row_date(r, field_name, label) BLOCK # Converted to React at root/components/FormRowPartialDate.js
-%]
    [% WRAPPER form_row %]
      [% r.label(field_name, label || r.form.field(field_name).label, fake => 1) %]
      [% r.date(field_name) %]
      [% field_errors(r.form, field_name) %]
    [% END %]
[%- END -%]

[%- MACRO too_short_year_error(id) BLOCK -%]
  <div class="error field-error" id="[% id %]" style="display: none">
    <div class="row no-label"> 
      [%- l('The year should have four digits. If you want to enter a year earlier than 1000 CE, please pad with zeros, such as “0123”.') -%]
    </div>
  </div>
[%- END -%]

[%- MACRO date_range_fieldset(r, type, ended_label) BLOCK # Converted to React at root/static/scripts/edit/components/DateRangeFieldset.js -%]
    <fieldset>
      <legend>[% l('Date Period') %]</legend>
      <p>
        [%- l('Dates are in the format YYYY-MM-DD. Partial dates such as YYYY-MM or just YYYY are OK, or you can omit the date entirely.') -%]
      </p>
      [% form_row_date(r, 'period.begin_date', l('Begin date:')) %]
      [% too_short_year_error('too_short_begin_year') %]
      [% form_row_date(r, 'period.end_date', l('End date:')) %]
      [% too_short_year_error('too_short_end_year') %]
      [% form_row_checkbox(r, 'period.ended', ended_label) %]
    </fieldset>
    <script type="text/javascript">
      MB.initializeToggleEnded('id-edit-[% type %]');
      MB.initializeTooShortYearChecks('[% type %]');
    </script>
[%- END -%]

[%- MACRO form_row_name_with_guesscase(r, options) BLOCK # Converted to React at root/static/scripts/edit/components/FormRowNameWithGuessCase.js -%]
  [% WRAPPER form_row %]
    [% r.label('name', options.label || l('Name:')) %]
    [% r.text('name', { class => 'with-guesscase' _ (options.guessfeat ? '-guessfeat' : '') }) %]
    <button type="button" class="guesscase-title icon" title="[% l('Guess case') %]"></button>
    [%- IF options.guessfeat -%]
      <button type="button" class="guessfeat icon" title="[% l('Guess feat. artists') %]"></button>
    [%- END -%]
    <button type="button" class="guesscase-options icon" title="[% l('Guess case options') %]"></button>
    [% field_errors(r.form, 'name') %]
  [% END %]
[%- END -%]

[%- MACRO form_row_sortname_with_guesscase(r) BLOCK # Converted to React at root/static/scripts/edit/components/FormRowSortNameWithGuessCase.js -%]
  [% WRAPPER form_row %]
    [% r.label('sort_name', l('Sort name:')) %]
    [% r.text('sort_name', { class => 'with-guesscase' }) %]
    <button type="button" class="guesscase-sortname icon" title="[% l('Guess sort name') %]"></button>
    <button type="button" class="sortname-copy icon" title="[% l('Copy name') %]"></button>
    [% field_errors(r.form, 'sort_name') %]
  [% END %]
[%- END -%]

[%- MACRO guesscase(show_icon) BLOCK -%]
  <fieldset class="guesscase">
    <legend>[% lp('Guess case', 'header') %]</legend>
    [% IF show_icon %]
      [% React.embed(c, 'static/scripts/edit/components/GuessCaseIcon') %]
    [% END %]
    <div style="float: right; margin: 10px;" class="buttons">
      <button id="guess-case-button" type="button" data-bind="click: guessCase">[% lp('Guess case', 'button/menu') %]</button>
    </div>
    <p class="guesscase-options">
      <select data-bind="value: modeName">
        <option value="English">[% l('English') %]</option>
        <option value="Sentence">[% l('Sentence') %]</option>
        <option value="French">[% l('French') %]</option>
        <option value="Turkish">[% l('Turkish') %]</option>
      </select>
      (<a href="/doc/Guess_Case" target="_blank">[% l('help') %]</a>)
      <br />
      <label>
        <input type="checkbox" data-bind="checked: keepUpperCase" />
        [% l('Keep all-uppercase words uppercased') %]
      </label>
      <br />
      <label>
        <input type="checkbox" data-bind="checked: upperCaseRoman" />
        [% l('Uppercase Roman numerals') %]
      </label>
    </p>
  </fieldset>
[%- END -%]

[%- MACRO guesscase_options BLOCK -%]
  <table id="guesscase-options">
    <tr>
      <td>
        <select data-bind="value: modeName">
          <option value="English">[% l('English') %]</option>
          <option value="Sentence">[% l('Sentence') %]</option>
          <option value="French">[% l('French') %]</option>
          <option value="Turkish">[% l('Turkish') %]</option>
        </select>
        (<a href="/doc/Guess_Case" target="_blank">[% l('help') %]</a>)
        <br />
        <label>
          <input type="checkbox" data-bind="checked: keepUpperCase" />
          [% l('Keep all-uppercase words uppercased') %]
        </label>
        <br />
        <label>
          <input type="checkbox" data-bind="checked: upperCaseRoman" />
          [% l('Uppercase Roman numerals') %]
        </label>
      </td>
      <td>
        <span data-bind="html: help"></span>
      </td>
    </tr>
  </table>
[%- END -%]

[%- MACRO iswc_bubble(work) BLOCK -%]
    <div class="bubble" id="iswcs-bubble">
      <p>[% l('You are about to add an ISWC to this work. The ISWC must be entered in
               standard <code>T-DDD.DDD.DDD-C</code> format:') %]</p>
      <ul>
        <li>[% l('"DDD" is a nine digit work identifier.') %]</li>
        <li>[% l('"C" is a single check digit.') %]</li>
      </ul>
    </div>
[%- END -%]

[%- MACRO isrc_bubble(recording) BLOCK -%]
    <div class="bubble" id="isrcs-bubble">
      <p>[% l('You are about to add an ISRC to this recording. The ISRC must be entered in
               standard <code>CCXXXYYNNNNN</code> format:') %]</p>
      <ul>
        <li>[% l('"CC" is the appropriate for the registrant two-character country code.') %]</li>
        <li>[% l('"XXX" is a three character alphanumeric registrant code, uniquely identifying the organisation which registered the code.') %]</li>
        <li>[% l('"YY" is the last two digits of the year of registration.') %]</li>
        <li>[% l('"NNNNN" is a unique 5-digit number identifying the particular sound recording.') %]</li>
      </ul>
    </div>
[%- END -%]

[%- MACRO ipi_bubble BLOCK -%]
    <div class="bubble" id="ipi-bubble">
      <p>[% l('IPI codes are assigned by CISAC to “interested parties” in musical rights management.
               Check {ipi_doc|the documentation} for more info.',
            { ipi_doc => doc_link('IPI') }) %]</p>
      <p>[% l('If you don’t know the code for this entity, just leave the field blank.') %]</p>
    </div>
[%- END -%]

[%- MACRO isni_bubble BLOCK -%]
    <div class="bubble" id="isni-bubble">
      <p>[% l('ISNI codes are an ISO standard used to uniquely identify persons and organizations.
               Check {isni_doc|the documentation} for more info.',
            { isni_doc => doc_link('ISNI') }) %]</p>
      <p>[% l('If you don’t know the code for this entity, just leave the field blank.') %]</p>
    </div>
[%- END -%]

[%- MACRO area_bubble BLOCK -%]
    <div class="bubble" id="area-bubble">
      <!-- ko with: target() && target().area -->
        <p data-bind="html: $data.selectionMessage()"></p>
      <!-- /ko -->
    </div>
[%- END -%]

[%- MACRO type_bubble(form, types) BLOCK -%]
    <div class="bubble" id="type-bubble">
      <span id="type-bubble-default" [% IF form.value %] style="display:none" [% END %]>
        [%- l('Select any type from the list to see its description. If the work
               doesn’t seem to match any type, just leave this blank.') -%]
      </span>
      [% FOREACH id IN form.options %]
         [%- id = id.value -%]
         <span [% IF form.value != id %] style="display:none" [% END %] class="type-bubble-description" id="type-bubble-description-[% id %]">
           [% IF types.$id.l_description %]
             [%- types.$id.l_description -%]
           [% ELSE %]
             [%- l('No description available.') -%]
           [% END %]
         </span>
      [% END %]
    </div>
[%- END -%]

[%- MACRO external_links_editor BLOCK -%]
  <div id="external-links-editor-container"></div>
[%- END -%]

[%- MACRO removal_help(extra_help) BLOCK -%] # Converted to React at root/components/EntityDeletionHelp.js 
  <div id="removal-help">
    <p>
      [% l('Are you sure you wish to remove {entity} from MusicBrainz?', { entity => link_entity(entity) }) %]
    </p>
    <p>
      [% l('If it’s a duplicate, {doc_merge|you should probably merge it instead}. If it just has some small errors, it’s usually better to just fix those.', { doc_merge => doc_link('Merge_Rather_Than_Delete') }) %]
    </p>
    [% IF extra_help %]
      <p>
        [% extra_help %]
      </p>
    [% END %]
  </div>
[%- END -%]
