<p>
  [%- l('For more information, check the {doc_doc|documentation} and {doc_styleguide|style guidelines}.',
        { doc_doc => { href => doc_link('Artist'), target => '_blank' },
          doc_styleguide => { href => doc_link('Style/Artist'), target => '_blank' } }) -%]
</p>

<form action="[% c.req.uri %]" method="post" class="edit-artist">
    [%- USE r = FormRenderer(form) -%]

    <div class="half-width">
      <fieldset>
        <legend>[% l('Artist details') %]</legend>
        [%- form_row_name_with_guesscase(r) -%]
        [%- form_row_sortname_with_guesscase(r) -%]
        [%- duplicate_entities_section() -%]
        [%- form_row_text_long(r, 'comment', add_colon(l('Disambiguation'))) -%]
        [%- disambiguation_error() -%]
        [%- form_row_select(r, 'type_id', add_colon(l('Type'))) -%]
        [%- form_row_select(r, 'gender_id', add_colon(l('Gender'))) -%]
        [% WRAPPER form_row %]
          [% area_field = form.field('area.name') %]
          <label for="id-edit-artist.area.name">[% add_colon(l('Area')) %]</label>
          <span id="area" class="area autocomplete">
            [% React.embed(c, 'static/scripts/common/components/SearchIcon') %]
            [% r.hidden(form.field('area').field('gid'), { class => 'gid' }) %]
            [% r.hidden('area_id', class => 'id') %]
            [% r.text(area_field, class => 'name') %]
          </span>
          [% field_errors(r.form, 'area.name') %]
        [% END %]
        [% React.embed(c, 'static/scripts/edit/components/FormRowTextListSimple', {
           repeatable => form_to_json(form.field('ipi_codes')),
           label => add_colon(l('IPI codes')),
           addButtonId => 'add-ipi-code',
           addButtonLabel => lp('Add IPI code', 'interactive'),
           removeButtonLabel => lp('Remove IPI code', 'interactive'),
         }) %]
        [% React.embed(c, 'static/scripts/edit/components/FormRowTextListSimple', {
           repeatable => form_to_json(form.field('isni_codes')),
           label => add_colon(l('ISNI codes')),
           addButtonId => 'add-isni-code',
           addButtonLabel => lp('Add ISNI code', 'interactive'),
           removeButtonLabel => lp('Remove ISNI code', 'interactive'),
         }) %]
      </fieldset>

      <fieldset>
        <legend>[% l('Date period') %]</legend>
        <p>
            [%- l('Dates are in the format YYYY-MM-DD. Partial dates such as YYYY-MM or just YYYY are OK, or you can omit the date entirely.') -%]
        </p>
        [% form_row_date(r, 'period.begin_date', add_colon(l('Begin date'))) %]
        [% too_short_year_error('too_short_begin_year') %]
        [% WRAPPER form_row %]
          [% begin_area_field = form.field('begin_area.name') %]
          <label id="label-id-edit-artist.begin_area.name" for="id-edit-artist.begin_area.name">[% add_colon(l('Begin area')) %]</label>
          <span id="begin_area" class="area autocomplete">
            [% React.embed(c, 'static/scripts/common/components/SearchIcon') %]
            [% r.hidden(form.field('begin_area').field('gid'), { class => 'gid' }) %]
            [% r.hidden('begin_area_id', class => 'id') %]
            [% r.text(begin_area_field, class => 'name') %]
          </span>
          [% field_errors(r.form, 'begin_area.name') %]
        [% END %]
        [% form_row_date(r, 'period.end_date', add_colon(l('End date'))) %]
        [% too_short_year_error('too_short_end_year') %]
        [% form_row_checkbox(r, 'period.ended', l('This artist has ended.')) %]
        [% WRAPPER form_row %]
          [% end_area_field = form.field('end_area.name') %]
          <label id="label-id-edit-artist.end_area.name" for="id-edit-artist.end_area.name">[% add_colon(l('End area')) %]</label>
          <span id="end_area" class="area autocomplete">
            [% React.embed(c, 'static/scripts/common/components/SearchIcon') %]
            [% r.hidden(form.field('end_area').field('gid'), { class => 'gid' }) %]
            [% r.hidden('end_area_id', class => 'id') %]
            [% r.text(end_area_field, class => 'name') %]
          </span>
          [% field_errors(r.form, 'end_area.name') %]
        [% END %]
      </fieldset>

      [% PROCESS 'forms/relationship-editor.tt' %]

      <fieldset>
        <legend>[% l('External links') %]</legend>
        [% external_links_editor() %]
      </fieldset>

      [% IF artist_credits.size %]
      [% React.embed(c, 'static/scripts/artist/components/ArtistCreditRenamer', {
        artistCredits => React.to_json_array(artist_credits),
        artistMbid => artist.gid,
        artistName => artist.name,
        initialArtistName => form.field('name').value,
        initialSelectedArtistCreditIds => form.rename_artist_credit_set(),
      }) %]
      [% END %]

      [% INCLUDE 'forms/edit-note.tt' %]

      [% enter_edit() %]
  </div>

  <div class="documentation">
    <div class="bubble" id="name-bubble">
      <p>
        [% l('The {doc|name} is the artist’s official name.',
             { doc => { href => doc_link('Artist#Name'), target => '_blank' } }) %]
      </p>
      <p>
        [% l('Please see the {doc|style guidelines} for more information.',
             { doc => { href => doc_link('Style/Artist#Name'), target => '_blank' } }) %]
      </p>
    </div>

    [%- sort_name_bubble() -%]

    <div class="bubble" id="comment-bubble">
      <p>
        [% l('The {doc|disambiguation} field helps users distinguish between artists with identical or similar names.
              Feel free to leave it blank if it seems unlikely that there will be other artists with similar names.',
             { doc => { href => doc_link('Disambiguation_Comment'), target => '_blank' } }) %]
      </p>
      <p>
        [% l('This field is not a place to store general background information.
              That kind of information should go in an {doc|annotation}.',
             { doc => { href => doc_link('Annotation'), target => '_blank' } }) %]
      </p>
    </div>

    [%- type_bubble(form.field('type_id'), artist_types) -%]

    <div class="bubble" id="gender-bubble">
      <p>
        [% l('The {doc|gender} field describes the gender with which a person or character identifies.',
             { doc => { href => doc_link('Artist#Gender'), target => '_blank' } }) %]
      </p>
      <p>
        [% l('Please see the {doc|style guidelines} for more information.',
             { doc => { href => doc_link('Style/Artist#Gender'), target => '_blank' } }) %]
      </p>
    </div>

    <div class="bubble" id="area-bubble">
      <p>
        [% l('The {doc|area} indicates the country the artist is primarily identified with.
              If the artist is strongly associated with an area smaller than a country, select that instead.',
             { doc => { href => doc_link('Artist#Area'), target => '_blank' } }) %]
      </p>
      <p>
        [% l('Please see the {doc|style guidelines} for more information.',
             { doc => { href => doc_link('Style/Artist#Main_area'), target => '_blank' } }) %]
      </p>
      [% area_bubble_selection() %]
    </div>

    [%- ipi_bubble() -%]
    [%- isni_bubble() -%]

    <div class="bubble" id="begin-end-date-bubble">
      <p class="desc desc-1">
        [% l('The {doc|begin and end dates} describe when the artist was born and died.',
             { doc => { href => doc_link('Artist#Begin_and_end_dates'), target => '_blank' } }) %]
      </p>
      <p class="desc desc-2 desc-5 desc-6">
        [% l('The {doc|begin and end dates} describe when the group was formed and dissolved.',
             { doc => { href => doc_link('Artist#Begin_and_end_dates'), target => '_blank' } }) %]
      </p>
      <p class="desc desc-4">
        [% l('The {doc|begin date} is the real-life date when the character concept was created.
              The end date should not be set.',
             { doc => { href => doc_link('Artist#Begin_and_end_dates'), target => '_blank' } }) %]
      </p>
      <p class="desc desc-default">
        [% l('The {doc|begin and end dates} describe when the artist started and stopped existing.',
             { doc => { href => doc_link('Artist#Begin_and_end_dates'), target => '_blank' } }) %]
      </p>
      <p>
        [% l('Please see the {doc|style guidelines} for more information.',
             { doc => { href => doc_link('Style/Artist#Begin_and_end_areas/dates'), target => '_blank' } }) %]
      </p>
    </div>

    <div class="bubble" id="begin-end-area-bubble">
      <p class="desc desc-1">
        [% l('The begin and end areas describe where the artist was born and died.') %]
      </p>
      <p class="desc desc-2 desc-5 desc-6">
        [% l('The begin and end areas describe where the group was formed and dissolved.') %]
      </p>
      <p class="desc desc-4">
        [% l('The begin area is the real-life area where the character concept was created.
              The end area should not be set.') %]
      </p>
      <p class="desc desc-default">
        [% l('The begin and end areas describe where the artist was when it started and stopped existing.') %]
      </p>
      <p>
        [% l('Please see the {doc|style guidelines} for more information.',
             { doc => { href => doc_link('Style/Artist#Begin_and_end_areas/dates'), target => '_blank' } }) %]
      </p>
      [% area_bubble_selection() %]
    </div>

    <div class="bubble" id="external-link-bubble">
      <p>
        [% l('External links are URLs associated with the artist.
              These can include the artist’s official homepage and social networking pages, streaming services,
              and unofficial pages like Wikipedia entries, biographies, interviews, and fan sites.') %]
      </p>
      <p>
        [% l('Please don’t add a Wikipedia page if a Wikidata item linking to the same article already exists.') %]
      </p>
    </div>
  </div>
</form>

[%- guesscase_options() -%]
[% script_manifest('artist/edit.js', {async => 'async'}) %]
