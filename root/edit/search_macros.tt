[% BLOCK wfield %]
<span class="field field-[% field %] predicate-[% predicate %]" style="display: none">
  [%- content %]
</span>
[% END %]

[% BLOCK search_heading %]
  <h1>[% l('Search for edits') %]</h1>
  <p>[% l('The filters below allow you to find only edits fulfilling specific criteria. See the {doc_link|documentation} for more info about using the filters.', {doc_link => doc_link('How to Use the Edit Search')}) %]</p>
  <p>[% l('If you want to save an edit search for future use, you can just bookmark it!') %]</p>
[% END %]

[% BLOCK search_form %]
<form action="[% c.req.uri.path %]" method="get" id="edit-search">
  <p>
    [%- MACRO selected_if_matches(value, to_match, true_if_undef) BLOCK;
        ' selected="selected"' IF (!to_match && true_if_undef) || value == to_match;
    END -%]

    [%- autoedit_select_block = '<select name="auto_edit_filter">
      <option value=""'  _ selected_if_matches('', query.auto_edit_filter, 1)  _ '>' _ l('edits')          _ '</option>
      <option value="1"' _ selected_if_matches('1', query.auto_edit_filter) _ '>' _ l('auto-edits')     _ '</option>
      <option value="0"' _ selected_if_matches('0', query.auto_edit_filter) _ '>' _ l('non-auto-edits') _ '</option>
    </select>' -%]
    [%- sort_select_block = '<select name="order">
      <option value="desc"' _ selected_if_matches('desc', query.order, 1) _ '>' _ l('newest first') _ '</option>
      <option value="asc"'  _ selected_if_matches('asc', query.order)  _ '>' _ l('oldest first') _ '</option>
      <option value="closed_desc"' _ selected_if_matches('closed_desc', query.order) _ '>' _ l('recently closed first')     _ '</option>
      <option value="closed_asc"' _ selected_if_matches('closed_asc', query.order) _ '>' _ l('earliest closed first')     _ '</option>
      <option value="vote_closing_asc"' _ selected_if_matches('vote_closing_asc', query.order) _ '>' _ l('voting closing sooner first')     _ '</option>
      <option value="vote_closing_desc"' _ selected_if_matches('vote_closing_desc', query.order) _ '>' _ l('voting closing later first')     _ '</option>
      <option value="latest_note"' _ selected_if_matches('latest_note', query.order) _ '>' _ l('with recent edit notes first')     _ '</option>
      <option value="rand"' _ selected_if_matches('rand', query.order) _ '>' _ l('in an unspecified order (possibly faster)')     _ '</option>
    </select>' -%]
    [%- match_or_negation_block = '<select name="negation">
      <option value="0"' _ selected_if_matches('0', query.negate, 1) _ '>' _ l('match')        _ '</option>
      <option value="1"' _ selected_if_matches('1', query.negate)    _ '>' _ l('do not match') _ '</option>
    </select>' -%]
    [%- and_vs_or_block = '<select name="combinator">
      <option value="and"' _ selected_if_matches('and', query.combinator, 1) _ '>' _ l('all') _ '</option>
      <option value="or"'  _ selected_if_matches('or', query.combinator)  _ '>' _ l('any') _ '</option>
    </select>' -%]
    [%- l('Show me {autoedit_select_block} sorted {sort_select_block} that
          {match_or_negation_block} {and_vs_or_block} of the following
          conditions:',
        { autoedit_select_block => autoedit_select_block,
          sort_select_block => sort_select_block,
          match_or_negation_block => match_or_negation_block,
          and_vs_or_block => and_vs_or_block }) -%]
  </p>

  <ul class="conditions">
    [% FOR field=query.fields %]
    <li class="condition">
      [% PROCESS remove %]
      [% select_field(field) %]
      <span class="field-container">
        [% SWITCH field.meta.name;
             CASE 'MusicBrainz::Server::EditSearch::Predicate::ID';
               predicate_id(field.field_name, field);
             CASE 'MusicBrainz::Server::EditSearch::Predicate::VoteCount';
               predicate_vote_count(field.field_name, field);
             CASE 'MusicBrainz::Server::EditSearch::Predicate::EditIDSet';
               predicate_set(field.field_name, edit_types, field, 15, 1);
             CASE 'MusicBrainz::Server::EditSearch::Predicate::Set';
               predicate_set(field.field_name, status, field, 8);
             CASE 'MusicBrainz::Server::EditSearch::Predicate::EditNoteContent';
               predicate_edit_note_content(field.field_name, field);
             CASE 'MusicBrainz::Server::EditSearch::Predicate::EditSubscription';
               predicate_edit_subscription(field.field_name, field);
             CASE 'MusicBrainz::Server::EditSearch::Predicate::ReleaseQuality';
               predicate_set(field.field_name, quality, field);
             CASE 'MusicBrainz::Server::EditSearch::Predicate::Date';
               predicate_date(field.field_name, field);
             CASE 'MusicBrainz::Server::EditSearch::Predicate::Voter';
               predicate_voter(field.field_name, field);
             CASE 'MusicBrainz::Server::EditSearch::Predicate::ReleaseLanguage';
               predicate_release_language(field.field_name, field);
             CASE 'MusicBrainz::Server::EditSearch::Predicate::ArtistArea';
               predicate_link(field.field_name, field, 'area');
             CASE 'MusicBrainz::Server::EditSearch::Predicate::LabelArea';
               predicate_link(field.field_name, field, 'area');
             CASE 'MusicBrainz::Server::EditSearch::Predicate::ReleaseCountry';
               predicate_country(field.field_name, field);
             CASE 'MusicBrainz::Server::EditSearch::Predicate::RelationshipType';
               predicate_link_type(field.field_name, field);
             CASE 'MusicBrainz::Server::EditSearch::Predicate::EditorFlag';
               predicate_editor_flag(field.field_name, field);
             CASE 'MusicBrainz::Server::EditSearch::Predicate::AppliedEdits';
               predicate_int(field.field_name, field);
             CASE 'MusicBrainz::Server::EditSearch::Predicate::URL';
               predicate_url(field.field_name, field);
           END %]
        [% IF field.does('MusicBrainz::Server::EditSearch::Predicate::Role::User');
             predicate_user(field.field_name, field);
           ELSIF field.does('MusicBrainz::Server::EditSearch::Predicate::Role::Subscribed');
             predicate_subscription(field.field_name, field);
           ELSIF field.does('MusicBrainz::Server::EditSearch::Predicate::Role::LinkedEntity');
             predicate_link(field.field_name, field);
           END %]
      </span>
      [% UNLESS field.valid %]
        <p>[% l('Oops! It seems your search parameters are not correct, please double check your input!') %]</p>
      [% END %]
    </li>
    [% END %]
    <li id="extra-condition">
      [% PROCESS remove %]
      [% select_field() %]
      <span class="field-container">
        <span class="field"></span>
      </span>
    </li>
  </ul>

  <span id="edit-search-submit">[% form_submit(l('Search')) %]</span>
</form>
[% PROCESS template_fields %]
[% END %]

[% BLOCK remove %]
<button type="button" class="remove-item icon" title="[% l('Remove') %]"></button>
[% END %]

[%- MACRO operators(operators, field_contents) BLOCK %]
  <select name="operator" class="operator">
    [%- FOR operator=operators %]
    <option
       [%~ ' selected="selected"' IF field_contents.operator == operator.0 =%]
       value="[% html_escape(operator.0) %]">[% html_escape(operator.1) %]</option>
    [%- END %]
  </select>
[%- END %]

[% MACRO predicate_id(field, field_contents) WRAPPER wfield predicate='id' %]
  [% operators([ [ '=', l('is') ],
                 [ '!=', l('is not') ],
                 [ '>', l('is after') ],
                 [ '<', l('is before') ],
                 ['BETWEEN', l('is between') ] ], field_contents) %]

  <span style="display:none" class="arg">
    <input type="number" name="args.0" size="10" value="[% html_escape(field_contents.argument(0)) %]" />
  </span>

  <span style="display:none" class="arg">
    &#x2013;
    <input type="number" name="args.1" size="10" value="[% html_escape(field_contents.argument(1)) %]" />
  </span>
[%- END %]

[% MACRO predicate_int_content(field, field_contents) BLOCK %]
  [% operators([ [ '=', l('is') ],
                 [ '!=', l('is not') ],
                 [ '>', l('is more than') ],
                 [ '<', l('is less than') ],
                 ['BETWEEN', l('is between') ] ], field_contents) %]

  <span style="display:none" class="arg">
    <input type="number" name="args.0" size="6" value="[% html_escape(field_contents.argument(0)) %]" />
  </span>

  <span style="display:none" class="arg">
    &#x2013;
    <input type="number" name="args.1" size="6" value="[% html_escape(field_contents.argument(1)) %]" />
  </span>
[% END %]

[% MACRO predicate_int(field, field_contents) WRAPPER wfield predicate='id' %]
  [%- predicate_int_content(field, field_contents) %]
[% END %]

[% MACRO predicate_date(field, field_contents) WRAPPER wfield predicate="date" %]
  [% operators([ [ '=', l('on') ],
                 [ '!=', l('is not') ],
                 [ '>', l('after') ],
                 [ '<', l('before') ],
                 [ 'BETWEEN', l('between') ] ], field_contents) %]

  <span style="display:none" class="arg">
    <input type="text" name="args.0" size="12" value="[% html_escape(field_contents.argument(0)) %]" />
  </span>

  <span style="display:none" class="arg">
    &#x2013;
    <input type="text" name="args.1" size="12" value="[% html_escape(field_contents.argument(1)) %]" />
  </span>

  <span>
    (<a href="[% c.uri_for('/doc/How_to_Use_the_Edit_Search#Dates') %]" target="_blank">[% l('help') %]</a>)
  </span>
[% END %]

[% MACRO predicate_set(field, set_contents, field_contents, size) WRAPPER wfield predicate="set" %]
  [% operators([ [ '=', l('is') ]
                 [ '!=', l('is not') ] ], field_contents) %]

  <select name="args" multiple="multiple"
          [%~ ' size="' _ size _ '"' IF size ~%]
          >
    [%- FOR item=set_contents %]
    <option value="[% html_escape(item.0) %]"
            [%~ ' selected="selected"' IF field_contents.find_argument(item.0).defined ~%]
            >[% l(html_escape(item.1)) %]</option>
    [%- END %]
  </select>
[% END %]

[% MACRO predicate_release_language(field, field_contents) WRAPPER wfield predicate="set" %]
  [% operators([ [ '=', l('is') ]
                 [ '!=', l('is not') ] ], field_contents) %]

  <select name="args" multiple="multiple" size="15">
    [%- FOR language=languages %]
    <option value="[% language.id %]"
            [%~ ' selected="selected"' IF field_contents.find_argument(language.id) ~%]
            >[% html_escape(language.l_name) %]</option>
    [%- END %]
  </select>
[% END %]

[%- MACRO relationship_node(node, pad, field_contents) BLOCK; %]
  [%- FOR child=node.children %]
      <option value="[% child.id %]"
          [%~ ' selected="selected"' IF field_contents.find_argument(child.id) ~%]>
          [%- pad _ child.name -%]</option>
      [%- relationship_node(child, pad _ '&#xa0;&#xa0;', field_contents) %]
  [%- END %]
[%- END %]

[% MACRO predicate_link_type(field, field_contents) WRAPPER wfield predicate="set" %]
  [% operators([ [ '=', l('is') ]
                 [ '!=', l('is not') ] ], field_contents) %]

  <select name="args" multiple="multiple" size="15">
    [%- FOR type_group=relationship_type %]
    <optgroup label="[% type_group.name %]">
        [%- relationship_node(top_level, '', field_contents)
             FOR top_level=type_group %]
    </optgroup>
    [%- END %]
  </select>

  <br />
  <p>[% l('Note: only searches edits that: add or edit relationships, entered after 2011-05-16; or which remove relationships, entered after 2013-07-08; or which reorder relationships.') %]</p>
[% END %]

[% MACRO predicate_link(field, field_contents, autocomplete_name) WRAPPER wfield predicate="set" %]
  [%- autocomplete_name = autocomplete_name.defined ? autocomplete_name : field | replace('_', '-') %]
  [% operators([ [ '=', l('is') ]
                 [ '!=', l('is not') ] ], field_contents) %]

  <span class="autocomplete [% autocomplete_name %]">
    [% React.embed(c, 'static/scripts/common/components/SearchIcon') %]
    <input type="text" class="name" name="name" value="[% html_escape(field_contents.name) %]" style="width: 170px;" />
    <input type="hidden" class="gid" />
    <input type="hidden" class="id" name="args.0" value="[% html_escape(field_contents.argument(0)) %]" />
  </span>
[% END %]

[% MACRO predicate_edit_notes BLOCK %]
  [%~ IF c.user_exists ~%]
    [% predicate_user('edit_note_author') %]
    [% predicate_edit_note_content('edit_note_content') %]
  [%~ ELSE ~%]
    [% WRAPPER wfield predicate="set" %]
      [%~ needs_login() ~%]
    [% END %]        
  [%~ END ~%]
[% END %]

[% MACRO predicate_voter(field, field_contents) WRAPPER wfield predicate="voter" %]
  [% operators([ [ '=', l('is') ]
                 [ '!=', l('is not') ]
                 [ 'me', l('is me') ]
                 [ 'not_me', l('is not me') ]
                 [ 'subscribed', l('is in my subscriptions') ]
                 [ 'not_subscribed', l('is not in my subscriptions') ]
               ], field_contents) %]

  <span class="arg autocomplete editor">
    [% React.embed(c, 'static/scripts/common/components/SearchIcon') %]
    <input type="text" class="name" name="name" value="[% html_escape(field_contents.name) %]" style="width: 170px;" />
    <input type="hidden" class="gid" />
    <input type="hidden" class="id" name="voter_id" value="[% html_escape(field_contents.voter_id) %]" />
  </span>

  <span>
    [% add_colon(l('and voted')) %]
  </span>

  <select name="args" multiple="multiple" size="5">
    [%- FOR item=[ [  2,   lp('Approve', 'vote') ]
                , [  1,   lp('Yes', 'vote') ]
                , [  0,   lp('No', 'vote') ]
                , [ -1,   lp('Abstain', 'vote') ]
                , [ 'no', l('No vote') ]
                ] %]
    <option value="[% html_escape(item.0) %]"
            [%~ ' selected="selected"' IF field_contents.find_argument(item.0).defined ~%]
            >[% html_escape(item.1) %]</option>
    [%- END %]
  </select>
[% END %]

[% MACRO predicate_vote_count(field, field_contents) WRAPPER wfield predicate="id" %]

  <select name="vote">
    [%- FOR item=[ [  2,   lp('Approve', 'vote') ]
                 , [  1,   lp('Yes', 'vote') ]
                 , [  0,   lp('No', 'vote') ]
                 , [ -1,   lp('Abstain', 'vote') ]
                 ] %]
    <option value="[% html_escape(item.0) %]"
            [%~ ' selected="selected"' IF field_contents.vote == item.0 ~%]
            >[% html_escape(item.1) %]</option>
    [%- END %]
  </select>
  [%- predicate_int_content(field, field_contents) %]
[% END %]

[% MACRO predicate_subscription(field, field_contents) WRAPPER wfield predicate="subscription" %]
  [% operators([ [ '=', l('is') ]
               , [ '!=', l('is not') ]
               , [ 'subscribed', l('is in my subscriptions') ]
               , [ 'not_subscribed', l('is not in my subscriptions') ]
               ], field_contents) %]

  <span class="arg autocomplete [% field | replace('_', '-') %]">
    [% React.embed(c, 'static/scripts/common/components/SearchIcon') %]
    <input type="text" class="name" name="name" value="[% html_escape(field_contents.name) %]" style="width: 170px;" />
    <input type="hidden" class="gid" />
    <input type="hidden" class="id" name="args.0" value="[% html_escape(field_contents.argument(0)) %]"  />
  </span>
[% END %]

[% MACRO predicate_country(field, field_contents) WRAPPER wfield predicate="set" %]
  [% operators([ [ '=', l('is') ]
                 [ '!=', l('is not') ] ], field_contents) %]

  <select name="args" multiple="multiple" size="15">
    [%- FOR country=countries %]
    <option value="[% country.id %]"
            [%- 'selected="selected"' IF field_contents.find_argument(country.id) %]>
        [%- html_escape(country.l_name) -%]</option>
    [%- END %]
  </select>
[% END %]

[% MACRO predicate_user(field, field_contents) WRAPPER wfield predicate="user" %]
  [% IF field == 'edit_note_author' # Edit note authors can be many, so we give clearer descriptions %]
    [% operators([ [ '=', l('include') ]
                   [ '!=', l('do not include') ]
                   [ 'me', l('include me') ]
                   [ 'not_me', l('do not include me') ]
                   [ 'subscribed', l('include an editor in my subscriptions') ]
                   [ 'not_subscribed', l('do not include editors in my subscriptions') ]
                   [ 'limited', l('include a beginner editor') ]
                   [ 'not_edit_author', l('include someone other than the edit author') ]
                   [ 'nobody', l('do not exist (edit has no notes)') ]
                ], field_contents) %]
  [% ELSE %]
    [% operators([ [ '=', l('is') ]
                   [ '!=', l('is not') ]
                   [ 'me', l('is me') ]
                   [ 'not_me', l('is not me') ]
                   [ 'subscribed', l('is in my subscriptions') ]
                   [ 'not_subscribed', l('is not in my subscriptions') ]
                   [ 'limited', l('is a beginner') ]
                ], field_contents) %]
  [% END %]  
  <span class="arg autocomplete editor">
    [% React.embed(c, 'static/scripts/common/components/SearchIcon') %]
    <input type="text" class="name" name="name" value="[% html_escape(field_contents.name) %]" style="width: 170px;" />
    <input type="hidden" class="gid" />
    <input type="hidden" class="id" name="args.0" value="[% html_escape(field_contents.argument(0)) %]" />
  </span>
[% END %]

[% MACRO predicate_edit_note_content(field, field_contents) WRAPPER wfield predicate="edit_note_content" %]
  [% operators([ [ 'includes', l('includes') ]
                 [ 'not-includes', l('does not include') ]
               ], field_contents) %]
  <span class="arg">
    <input type="text" class="name" name="args.0" value="[% html_escape(field_contents.argument(0)) %]" style="width: 170px;" />
  </span>
[% END %]

[% MACRO predicate_edit_subscription(field, field_contents) WRAPPER wfield predicate="edit_subscription" %]
  [% operators([ [ 'subscribed', l('is in my subscriptions') ]
                 [ 'not_subscribed', l('is not in my subscriptions') ]
               ], field_contents) %]
[% END %]

[% MACRO predicate_editor_flag(field, field_contents) WRAPPER wfield predicate="set" %]
  [% operators([ [ '=', l('is') ]
                 [ '!=', l('is not') ] ], field_contents) %]

  <select name="args" multiple="multiple">
    [%~ editor_flags = [[1, lp('Auto-editor', 'user type')], [2, lp('Bot', 'user type')]];
        IF c.user.is_account_admin; editor_flags.push([4, l_admin('Untrusted')]); END;
        editor_flags.push(
          [8, lp('Relationship editor', 'user type')],
          [32, lp('Transclusion editor', 'user type')],
          [256, lp('Location editor', 'user type')]
        )
    ~%]
    [%- FOR item=editor_flags %]
    <option value="[% html_escape(item.0) %]"
            [%~ ' selected="selected"' IF field_contents.find_argument(item.0).defined ~%]
            >[% html_escape(item.1) %]</option>
    [%- END %]
  </select>
[% END %]

[% MACRO predicate_url(field, field_contents) WRAPPER wfield predicate="url" %]
  [% operators([ [ '=', l('is') ]
                 [ '!=', l('is not') ] ], field_contents) %]

  <span class="arg">
    <input type="text" size="75" class="name" name="args.0" value="[% html_escape(field_contents.argument(0)) %]" />
  </span>
[% END %]

[% BLOCK needs_login %]
  [%~ l('You must be logged in to use this option.') %]
  [% request_login() -%]
[% END %]

[% MACRO select_field(field_contents) BLOCK %]
  <select name="field" class="field">
    [% UNLESS field_contents %]
      <option>[% l('Please choose a condition') %]</option>
    [% END %]
    [% FOR field=[ [ 'id', l('ID') ],
                   [ 'open_time', l('Entered') ],
                   [ 'expire_time', l('Voting closed') ],
                   [ 'close_time', l('Closed') ],
                   [ 'status', lp('Status', 'edit status') ],
                   [ 'type', l('Type') ],
                   [ 'vote_count', l('Vote tally') ],
                   [ 'edit_note_author', l('Edit note authors'), {requires_login => 1} ],
                   [ 'edit_note_content', l('Edit note content'), {requires_login => 1} ],
                   [ 'edit_subscription', l('Edited entity'), {requires_login => 1} ],
                   [ 'area', l('Area') ],
                   [ 'artist', l('Artist') ],
                   [ 'event', l('Event') ],
                   [ 'genre', l('Genre') ],
                   [ 'instrument', l('Instrument') ],
                   [ 'label', l('Label') ],
                   [ 'place', l('Place') ],
                   [ 'recording', l('Recording') ],
                   [ 'release', l('Release') ],
                   [ 'release_group', l('Release group') ],
                   [ 'series', lp('Series', 'singular') ],
                   [ 'url', l('URL') ],
                   [ 'work', l('Work') ],
                   [ 'editor', l('Editor'), {requires_login => 1} ],
                   [ 'voter', l('Voter'), {requires_login => 1} ]
                   [ 'release_language', l('Release language') ],
                   [ 'release_quality', l('Release data quality') ],
                   [ 'artist_area', l('Artist area') ],
                   [ 'label_area', l('Label area') ]
                   [ 'release_country', l('Release country') ]
                   [ 'link_type', l('Relationship type') ],
                   [ 'editor_flag', l('Editor flag'), {requires_login => 1} ],
                   [ 'applied_edits', l('Applied edit count of editor'), {requires_login => 1} ],
                   ] -%]
      [% UNLESS (field.2.requires_login && !c.user_exists) %]
        <option
          [%~ ' selected="selected"' IF field_contents.field_name == field.0 =%]
          value="[% html_escape(field.0) %]">[% html_escape(field.1) %]</option>
      [% END %]
    [% END %]
  </select>
[% END %]

[% BLOCK template_fields %]
  <div id="fields">
    [% predicate_id('id') %]
    [% predicate_date(field_name) FOR field_name=['open_time', 'expire_time', 'close_time'] %]
    [% predicate_set('type', edit_types, [], 15) %]
    [% predicate_set('status', status, [], 8) %]
    [% predicate_set('release_quality', quality) %]
    [% predicate_vote_count('vote_count') %]
    [% predicate_edit_notes %]
    [% predicate_edit_subscription('edit_subscription') %]

    [% FOR linked_type=[ 'artist', 'label', 'series' ];
         predicate_subscription(linked_type);
       END %]

    [% FOR linked_type=[ 'area', 'event', 'genre', 'instrument', 'place', 'recording', 'release_group', 'release', 'work' ];
         predicate_link(linked_type);
       END %]

    [% predicate_url('url') %]

    [% predicate_user('editor') %]
    [% predicate_voter('voter') %]
    [% predicate_release_language('release_language') %]
    [% predicate_link('artist_area', undef, 'area') %]
    [% predicate_link('label_area', undef, 'area') %]
    [% predicate_country('release_country') %]
    [% predicate_link_type('link_type') %]
    [% predicate_editor_flag('editor_flag') %]
    [% predicate_int('applied_edits') %]
  </div>
[% END %]
